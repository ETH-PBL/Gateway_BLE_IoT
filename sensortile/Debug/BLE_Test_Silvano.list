
BLE_Test_Silvano.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800433c  0800433c  0001433c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043d4  080043d4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080043d4  080043d4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043d4  080043d4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043d4  080043d4  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043d8  080043d8  000143d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080043dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002004  20000014  080043f0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002018  080043f0  00022018  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac71  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000318f  00000000  00000000  0003acb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  0003de48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  0003ed00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292ae  00000000  00000000  0003fa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012135  00000000  00000000  00068d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef32a  00000000  00000000  0007ae3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016a165  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a0c  00000000  00000000  0016a1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004324 	.word	0x08004324

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004324 	.word	0x08004324

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b088      	sub	sp, #32
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001e0:	4b1d      	ldr	r3, [pc, #116]	; (8000258 <HCI_TL_SPI_Init+0x80>)
 80001e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e4:	4a1c      	ldr	r2, [pc, #112]	; (8000258 <HCI_TL_SPI_Init+0x80>)
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001ec:	4b1a      	ldr	r3, [pc, #104]	; (8000258 <HCI_TL_SPI_Init+0x80>)
 80001ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f0:	f003 0301 	and.w	r3, r3, #1
 80001f4:	60bb      	str	r3, [r7, #8]
 80001f6:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80001f8:	2320      	movs	r3, #32
 80001fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001fc:	4b17      	ldr	r3, [pc, #92]	; (800025c <HCI_TL_SPI_Init+0x84>)
 80001fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000200:	2300      	movs	r3, #0
 8000202:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000204:	f107 030c 	add.w	r3, r7, #12
 8000208:	4619      	mov	r1, r3
 800020a:	4815      	ldr	r0, [pc, #84]	; (8000260 <HCI_TL_SPI_Init+0x88>)
 800020c:	f001 fb3c 	bl	8001888 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000210:	2301      	movs	r3, #1
 8000212:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000214:	2301      	movs	r3, #1
 8000216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000218:	2300      	movs	r3, #0
 800021a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021c:	2300      	movs	r3, #0
 800021e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000220:	f107 030c 	add.w	r3, r7, #12
 8000224:	4619      	mov	r1, r3
 8000226:	480f      	ldr	r0, [pc, #60]	; (8000264 <HCI_TL_SPI_Init+0x8c>)
 8000228:	f001 fb2e 	bl	8001888 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800022c:	2304      	movs	r3, #4
 800022e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000230:	2301      	movs	r3, #1
 8000232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000234:	2300      	movs	r3, #0
 8000236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000238:	2300      	movs	r3, #0
 800023a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800023c:	f107 030c 	add.w	r3, r7, #12
 8000240:	4619      	mov	r1, r3
 8000242:	4809      	ldr	r0, [pc, #36]	; (8000268 <HCI_TL_SPI_Init+0x90>)
 8000244:	f001 fb20 	bl	8001888 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 8000248:	f000 f950 	bl	80004ec <BSP_SPI1_Init>
 800024c:	4603      	mov	r3, r0
}
 800024e:	4618      	mov	r0, r3
 8000250:	3720      	adds	r7, #32
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40021000 	.word	0x40021000
 800025c:	10110000 	.word	0x10110000
 8000260:	48000800 	.word	0x48000800
 8000264:	48001c00 	.word	0x48001c00
 8000268:	48000400 	.word	0x48000400

0800026c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000270:	2120      	movs	r1, #32
 8000272:	4807      	ldr	r0, [pc, #28]	; (8000290 <HCI_TL_SPI_DeInit+0x24>)
 8000274:	f001 fcb2 	bl	8001bdc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000278:	2104      	movs	r1, #4
 800027a:	4806      	ldr	r0, [pc, #24]	; (8000294 <HCI_TL_SPI_DeInit+0x28>)
 800027c:	f001 fcae 	bl	8001bdc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000280:	2101      	movs	r1, #1
 8000282:	4805      	ldr	r0, [pc, #20]	; (8000298 <HCI_TL_SPI_DeInit+0x2c>)
 8000284:	f001 fcaa 	bl	8001bdc <HAL_GPIO_DeInit>
  return 0;
 8000288:	2300      	movs	r3, #0
}
 800028a:	4618      	mov	r0, r3
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	48000800 	.word	0x48000800
 8000294:	48000400 	.word	0x48000400
 8000298:	48001c00 	.word	0x48001c00

0800029c <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2104      	movs	r1, #4
 80002a4:	480a      	ldr	r0, [pc, #40]	; (80002d0 <HCI_TL_SPI_Reset+0x34>)
 80002a6:	f001 fda5 	bl	8001df4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2101      	movs	r1, #1
 80002ae:	4809      	ldr	r0, [pc, #36]	; (80002d4 <HCI_TL_SPI_Reset+0x38>)
 80002b0:	f001 fda0 	bl	8001df4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80002b4:	2005      	movs	r0, #5
 80002b6:	f001 f953 	bl	8001560 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	2101      	movs	r1, #1
 80002be:	4805      	ldr	r0, [pc, #20]	; (80002d4 <HCI_TL_SPI_Reset+0x38>)
 80002c0:	f001 fd98 	bl	8001df4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80002c4:	2005      	movs	r0, #5
 80002c6:	f001 f94b 	bl	8001560 <HAL_Delay>
  return 0;
 80002ca:	2300      	movs	r3, #0
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	48000400 	.word	0x48000400
 80002d4:	48001c00 	.word	0x48001c00

080002d8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	460b      	mov	r3, r1
 80002e2:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80002e8:	23ff      	movs	r3, #255	; 0xff
 80002ea:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80002ec:	4a25      	ldr	r2, [pc, #148]	; (8000384 <HCI_TL_SPI_Receive+0xac>)
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f6:	6018      	str	r0, [r3, #0]
 80002f8:	3304      	adds	r3, #4
 80002fa:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2104      	movs	r1, #4
 8000300:	4821      	ldr	r0, [pc, #132]	; (8000388 <HCI_TL_SPI_Receive+0xb0>)
 8000302:	f001 fd77 	bl	8001df4 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000306:	f107 010c 	add.w	r1, r7, #12
 800030a:	f107 0314 	add.w	r3, r7, #20
 800030e:	2205      	movs	r2, #5
 8000310:	4618      	mov	r0, r3
 8000312:	f000 f91b 	bl	800054c <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8000316:	7b3b      	ldrb	r3, [r7, #12]
 8000318:	2b02      	cmp	r3, #2
 800031a:	d129      	bne.n	8000370 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800031c:	7c3b      	ldrb	r3, [r7, #16]
 800031e:	021b      	lsls	r3, r3, #8
 8000320:	b21a      	sxth	r2, r3
 8000322:	7bfb      	ldrb	r3, [r7, #15]
 8000324:	b21b      	sxth	r3, r3
 8000326:	4313      	orrs	r3, r2
 8000328:	b21b      	sxth	r3, r3
 800032a:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 800032c:	8bfb      	ldrh	r3, [r7, #30]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d01e      	beq.n	8000370 <HCI_TL_SPI_Receive+0x98>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8000332:	8bfa      	ldrh	r2, [r7, #30]
 8000334:	887b      	ldrh	r3, [r7, #2]
 8000336:	429a      	cmp	r2, r3
 8000338:	d901      	bls.n	800033e <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 800033a:	887b      	ldrh	r3, [r7, #2]
 800033c:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 800033e:	2300      	movs	r3, #0
 8000340:	777b      	strb	r3, [r7, #29]
 8000342:	e010      	b.n	8000366 <HCI_TL_SPI_Receive+0x8e>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8000344:	f107 011b 	add.w	r1, r7, #27
 8000348:	f107 031c 	add.w	r3, r7, #28
 800034c:	2201      	movs	r2, #1
 800034e:	4618      	mov	r0, r3
 8000350:	f000 f8fc 	bl	800054c <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8000354:	7f7b      	ldrb	r3, [r7, #29]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	4413      	add	r3, r2
 800035a:	7efa      	ldrb	r2, [r7, #27]
 800035c:	b2d2      	uxtb	r2, r2
 800035e:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000360:	7f7b      	ldrb	r3, [r7, #29]
 8000362:	3301      	adds	r3, #1
 8000364:	777b      	strb	r3, [r7, #29]
 8000366:	7f7b      	ldrb	r3, [r7, #29]
 8000368:	b29b      	uxth	r3, r3
 800036a:	8bfa      	ldrh	r2, [r7, #30]
 800036c:	429a      	cmp	r2, r3
 800036e:	d8e9      	bhi.n	8000344 <HCI_TL_SPI_Receive+0x6c>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	2104      	movs	r1, #4
 8000374:	4804      	ldr	r0, [pc, #16]	; (8000388 <HCI_TL_SPI_Receive+0xb0>)
 8000376:	f001 fd3d 	bl	8001df4 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 800037a:	7f7b      	ldrb	r3, [r7, #29]
}
 800037c:	4618      	mov	r0, r3
 800037e:	3720      	adds	r7, #32
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	0800433c 	.word	0x0800433c
 8000388:	48000400 	.word	0x48000400

0800038c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	460b      	mov	r3, r1
 8000396:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000398:	4a23      	ldr	r2, [pc, #140]	; (8000428 <HCI_TL_SPI_Send+0x9c>)
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003a2:	6018      	str	r0, [r3, #0]
 80003a4:	3304      	adds	r3, #4
 80003a6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80003a8:	f001 f8ce 	bl	8001548 <HAL_GetTick>
 80003ac:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2104      	movs	r1, #4
 80003b6:	481d      	ldr	r0, [pc, #116]	; (800042c <HCI_TL_SPI_Send+0xa0>)
 80003b8:	f001 fd1c 	bl	8001df4 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80003bc:	f107 0108 	add.w	r1, r7, #8
 80003c0:	f107 0310 	add.w	r3, r7, #16
 80003c4:	2205      	movs	r2, #5
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 f8c0 	bl	800054c <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 80003cc:	7a3b      	ldrb	r3, [r7, #8]
 80003ce:	2b02      	cmp	r3, #2
 80003d0:	d10f      	bne.n	80003f2 <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80003d2:	7a7b      	ldrb	r3, [r7, #9]
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	887a      	ldrh	r2, [r7, #2]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d806      	bhi.n	80003ea <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80003dc:	887b      	ldrh	r3, [r7, #2]
 80003de:	461a      	mov	r2, r3
 80003e0:	4913      	ldr	r1, [pc, #76]	; (8000430 <HCI_TL_SPI_Send+0xa4>)
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	f000 f8b2 	bl	800054c <BSP_SPI1_SendRecv>
 80003e8:	e006      	b.n	80003f8 <HCI_TL_SPI_Send+0x6c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80003ea:	f06f 0301 	mvn.w	r3, #1
 80003ee:	61fb      	str	r3, [r7, #28]
 80003f0:	e002      	b.n	80003f8 <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80003f2:	f04f 33ff 	mov.w	r3, #4294967295
 80003f6:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80003f8:	2201      	movs	r2, #1
 80003fa:	2104      	movs	r1, #4
 80003fc:	480b      	ldr	r0, [pc, #44]	; (800042c <HCI_TL_SPI_Send+0xa0>)
 80003fe:	f001 fcf9 	bl	8001df4 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000402:	f001 f8a1 	bl	8001548 <HAL_GetTick>
 8000406:	4602      	mov	r2, r0
 8000408:	69bb      	ldr	r3, [r7, #24]
 800040a:	1ad3      	subs	r3, r2, r3
 800040c:	2b0f      	cmp	r3, #15
 800040e:	d903      	bls.n	8000418 <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 8000410:	f06f 0302 	mvn.w	r3, #2
 8000414:	61fb      	str	r3, [r7, #28]
      break;
 8000416:	e002      	b.n	800041e <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 8000418:	69fb      	ldr	r3, [r7, #28]
 800041a:	2b00      	cmp	r3, #0
 800041c:	dbc7      	blt.n	80003ae <HCI_TL_SPI_Send+0x22>

  return result;
 800041e:	69fb      	ldr	r3, [r7, #28]
}
 8000420:	4618      	mov	r0, r3
 8000422:	3720      	adds	r7, #32
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	08004344 	.word	0x08004344
 800042c:	48000400 	.word	0x48000400
 8000430:	20000030 	.word	0x20000030

08000434 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000438:	2120      	movs	r1, #32
 800043a:	4805      	ldr	r0, [pc, #20]	; (8000450 <IsDataAvailable+0x1c>)
 800043c:	f001 fcc2 	bl	8001dc4 <HAL_GPIO_ReadPin>
 8000440:	4603      	mov	r3, r0
 8000442:	2b01      	cmp	r3, #1
 8000444:	bf0c      	ite	eq
 8000446:	2301      	moveq	r3, #1
 8000448:	2300      	movne	r3, #0
 800044a:	b2db      	uxtb	r3, r3
}
 800044c:	4618      	mov	r0, r3
 800044e:	bd80      	pop	{r7, pc}
 8000450:	48000800 	.word	0x48000800

08000454 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b088      	sub	sp, #32
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <hci_tl_lowlevel_init+0x50>)
 800045c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <hci_tl_lowlevel_init+0x54>)
 8000460:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000462:	4b12      	ldr	r3, [pc, #72]	; (80004ac <hci_tl_lowlevel_init+0x58>)
 8000464:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <hci_tl_lowlevel_init+0x5c>)
 8000468:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800046a:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <hci_tl_lowlevel_init+0x60>)
 800046c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <hci_tl_lowlevel_init+0x64>)
 8000470:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	4618      	mov	r0, r3
 8000476:	f003 fc51 	bl	8003d1c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti5, EXTI_LINE_5);
 800047a:	4910      	ldr	r1, [pc, #64]	; (80004bc <hci_tl_lowlevel_init+0x68>)
 800047c:	4810      	ldr	r0, [pc, #64]	; (80004c0 <hci_tl_lowlevel_init+0x6c>)
 800047e:	f001 f9be 	bl	80017fe <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti5, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000482:	4a10      	ldr	r2, [pc, #64]	; (80004c4 <hci_tl_lowlevel_init+0x70>)
 8000484:	2100      	movs	r1, #0
 8000486:	480e      	ldr	r0, [pc, #56]	; (80004c0 <hci_tl_lowlevel_init+0x6c>)
 8000488:	f001 f99f 	bl	80017ca <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	2100      	movs	r1, #0
 8000490:	2017      	movs	r0, #23
 8000492:	f001 f964 	bl	800175e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000496:	2017      	movs	r0, #23
 8000498:	f001 f97d 	bl	8001796 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800049c:	bf00      	nop
 800049e:	3720      	adds	r7, #32
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	080001d9 	.word	0x080001d9
 80004a8:	0800026d 	.word	0x0800026d
 80004ac:	0800038d 	.word	0x0800038d
 80004b0:	080002d9 	.word	0x080002d9
 80004b4:	0800029d 	.word	0x0800029d
 80004b8:	0800058d 	.word	0x0800058d
 80004bc:	16000005 	.word	0x16000005
 80004c0:	20001ebc 	.word	0x20001ebc
 80004c4:	080004c9 	.word	0x080004c9

080004c8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80004cc:	e005      	b.n	80004da <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80004ce:	2000      	movs	r0, #0
 80004d0:	f003 fd8a 	bl	8003fe8 <hci_notify_asynch_evt>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d105      	bne.n	80004e6 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80004da:	f7ff ffab 	bl	8000434 <IsDataAvailable>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d1f4      	bne.n	80004ce <hci_tl_lowlevel_isr+0x6>
 80004e4:	e000      	b.n	80004e8 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80004e6:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80004f6:	4b12      	ldr	r3, [pc, #72]	; (8000540 <BSP_SPI1_Init+0x54>)
 80004f8:	4a12      	ldr	r2, [pc, #72]	; (8000544 <BSP_SPI1_Init+0x58>)
 80004fa:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <BSP_SPI1_Init+0x5c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	1c5a      	adds	r2, r3, #1
 8000502:	4911      	ldr	r1, [pc, #68]	; (8000548 <BSP_SPI1_Init+0x5c>)
 8000504:	600a      	str	r2, [r1, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d114      	bne.n	8000534 <BSP_SPI1_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800050a:	480d      	ldr	r0, [pc, #52]	; (8000540 <BSP_SPI1_Init+0x54>)
 800050c:	f002 fd72 	bl	8002ff4 <HAL_SPI_GetState>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d10e      	bne.n	8000534 <BSP_SPI1_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 8000516:	480a      	ldr	r0, [pc, #40]	; (8000540 <BSP_SPI1_Init+0x54>)
 8000518:	f000 f882 	bl	8000620 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d108      	bne.n	8000534 <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000522:	4807      	ldr	r0, [pc, #28]	; (8000540 <BSP_SPI1_Init+0x54>)
 8000524:	f000 f83a 	bl	800059c <MX_SPI1_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d002      	beq.n	8000534 <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 800052e:	f06f 0307 	mvn.w	r3, #7
 8000532:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20001ec4 	.word	0x20001ec4
 8000544:	40013000 	.word	0x40013000
 8000548:	20000130 	.word	0x20000130

0800054c <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af02      	add	r7, sp, #8
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	4613      	mov	r3, r2
 8000558:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	68ba      	ldr	r2, [r7, #8]
 8000568:	68f9      	ldr	r1, [r7, #12]
 800056a:	4807      	ldr	r0, [pc, #28]	; (8000588 <BSP_SPI1_SendRecv+0x3c>)
 800056c:	f002 fb2f 	bl	8002bce <HAL_SPI_TransmitReceive>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d002      	beq.n	800057c <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000576:	f06f 0305 	mvn.w	r3, #5
 800057a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800057c:	697b      	ldr	r3, [r7, #20]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20001ec4 	.word	0x20001ec4

0800058c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000590:	f000 ffda 	bl	8001548 <HAL_GetTick>
 8000594:	4603      	mov	r3, r0
}
 8000596:	4618      	mov	r0, r3
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80005a4:	2300      	movs	r3, #0
 80005a6:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a1c      	ldr	r2, [pc, #112]	; (800061c <MX_SPI1_Init+0x80>)
 80005ac:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005b4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005c2:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2200      	movs	r2, #0
 80005ce:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005d6:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2218      	movs	r2, #24
 80005dc:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2200      	movs	r2, #0
 80005ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2207      	movs	r2, #7
 80005f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2208      	movs	r2, #8
 8000600:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f002 fa36 	bl	8002a74 <HAL_SPI_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40013000 	.word	0x40013000

08000620 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000628:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <SPI1_MspInit+0xa8>)
 800062a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800062c:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <SPI1_MspInit+0xa8>)
 800062e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000632:	6613      	str	r3, [r2, #96]	; 0x60
 8000634:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <SPI1_MspInit+0xa8>)
 8000636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000640:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <SPI1_MspInit+0xa8>)
 8000642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000644:	4a20      	ldr	r2, [pc, #128]	; (80006c8 <SPI1_MspInit+0xa8>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <SPI1_MspInit+0xa8>)
 800064e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000664:	2303      	movs	r3, #3
 8000666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000668:	2305      	movs	r3, #5
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f001 f907 	bl	8001888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800067a:	2340      	movs	r3, #64	; 0x40
 800067c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067e:	2302      	movs	r3, #2
 8000680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000686:	2303      	movs	r3, #3
 8000688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 800068a:	2305      	movs	r3, #5
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000698:	f001 f8f6 	bl	8001888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800069c:	2320      	movs	r3, #32
 800069e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80006ac:	2305      	movs	r3, #5
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ba:	f001 f8e5 	bl	8001888 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80006be:	bf00      	nop
 80006c0:	3728      	adds	r7, #40	; 0x28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d2:	f000 fed1 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d6:	f000 f82b 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006da:	f000 f87b 	bl	80007d4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* init the BLE module */
  check_ble_ret_val(MX_BlueNRG_MS_Init());
 80006de:	f000 fb41 	bl	8000d64 <MX_BlueNRG_MS_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 f91d 	bl	8000924 <check_ble_ret_val>

  /* flash LED to signalize BLE setup completed */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f0:	480e      	ldr	r0, [pc, #56]	; (800072c <main+0x60>)
 80006f2:	f001 fb7f 	bl	8001df4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80006f6:	2064      	movs	r0, #100	; 0x64
 80006f8:	f000 ff32 	bl	8001560 <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000702:	480a      	ldr	r0, [pc, #40]	; (800072c <main+0x60>)
 8000704:	f001 fb76 	bl	8001df4 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t counter = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
  while (1) {
	  /* process new BLE events and send notifications */
	  check_ble_ret_val(MX_BlueNRG_MS_Process());
 800070c:	f000 fba0 	bl	8000e50 <MX_BlueNRG_MS_Process>
 8000710:	4603      	mov	r3, r0
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f906 	bl	8000924 <check_ble_ret_val>

	  //set_counter_2_characteristic(UINT32_MAX - counter);
	  set_counter_1_characteristic(counter++);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	607a      	str	r2, [r7, #4]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f9c8 	bl	8000ab4 <set_counter_1_characteristic>

	  HAL_Delay(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f000 ff1b 	bl	8001560 <HAL_Delay>
	  check_ble_ret_val(MX_BlueNRG_MS_Process());
 800072a:	e7ef      	b.n	800070c <main+0x40>
 800072c:	48001800 	.word	0x48001800

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b096      	sub	sp, #88	; 0x58
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2244      	movs	r2, #68	; 0x44
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fde8 	bl	8004314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000752:	2310      	movs	r3, #16
 8000754:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000756:	2301      	movs	r3, #1
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800075e:	2360      	movs	r3, #96	; 0x60
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000766:	2301      	movs	r3, #1
 8000768:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800076a:	2301      	movs	r3, #1
 800076c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800076e:	2328      	movs	r3, #40	; 0x28
 8000770:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000772:	2307      	movs	r3, #7
 8000774:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000776:	2302      	movs	r3, #2
 8000778:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800077a:	2302      	movs	r3, #2
 800077c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4618      	mov	r0, r3
 8000784:	f001 fbc2 	bl	8001f0c <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800078e:	f000 f8d8 	bl	8000942 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	230f      	movs	r3, #15
 8000794:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2303      	movs	r3, #3
 8000798:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	2104      	movs	r1, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 ff94 	bl	80026d8 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007b6:	f000 f8c4 	bl	8000942 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007be:	f001 fb3f 	bl	8001e40 <HAL_PWREx_ControlVoltageScaling>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007c8:	f000 f8bb 	bl	8000942 <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3758      	adds	r7, #88	; 0x58
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ea:	4b48      	ldr	r3, [pc, #288]	; (800090c <MX_GPIO_Init+0x138>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a47      	ldr	r2, [pc, #284]	; (800090c <MX_GPIO_Init+0x138>)
 80007f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b45      	ldr	r3, [pc, #276]	; (800090c <MX_GPIO_Init+0x138>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8000802:	f001 fb73 	bl	8001eec <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	4b41      	ldr	r3, [pc, #260]	; (800090c <MX_GPIO_Init+0x138>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a40      	ldr	r2, [pc, #256]	; (800090c <MX_GPIO_Init+0x138>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b3e      	ldr	r3, [pc, #248]	; (800090c <MX_GPIO_Init+0x138>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b3b      	ldr	r3, [pc, #236]	; (800090c <MX_GPIO_Init+0x138>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a3a      	ldr	r2, [pc, #232]	; (800090c <MX_GPIO_Init+0x138>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b38      	ldr	r3, [pc, #224]	; (800090c <MX_GPIO_Init+0x138>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b35      	ldr	r3, [pc, #212]	; (800090c <MX_GPIO_Init+0x138>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a34      	ldr	r2, [pc, #208]	; (800090c <MX_GPIO_Init+0x138>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b32      	ldr	r3, [pc, #200]	; (800090c <MX_GPIO_Init+0x138>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b2f      	ldr	r3, [pc, #188]	; (800090c <MX_GPIO_Init+0x138>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a2e      	ldr	r2, [pc, #184]	; (800090c <MX_GPIO_Init+0x138>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <MX_GPIO_Init+0x138>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086c:	4828      	ldr	r0, [pc, #160]	; (8000910 <MX_GPIO_Init+0x13c>)
 800086e:	f001 fac1 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_RST_GPIO_Port, BLUE_RST_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2101      	movs	r1, #1
 8000876:	4827      	ldr	r0, [pc, #156]	; (8000914 <MX_GPIO_Init+0x140>)
 8000878:	f001 fabc 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_CS_GPIO_Port, BLUE_CS_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2104      	movs	r1, #4
 8000880:	4825      	ldr	r0, [pc, #148]	; (8000918 <MX_GPIO_Init+0x144>)
 8000882:	f001 fab7 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	481c      	ldr	r0, [pc, #112]	; (8000910 <MX_GPIO_Init+0x13c>)
 80008a0:	f000 fff2 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_RST_Pin */
  GPIO_InitStruct.Pin = BLUE_RST_Pin;
 80008a4:	2301      	movs	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_RST_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4816      	ldr	r0, [pc, #88]	; (8000914 <MX_GPIO_Init+0x140>)
 80008bc:	f000 ffe4 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_CS_Pin */
  GPIO_InitStruct.Pin = BLUE_CS_Pin;
 80008c0:	2304      	movs	r3, #4
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_CS_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	4810      	ldr	r0, [pc, #64]	; (8000918 <MX_GPIO_Init+0x144>)
 80008d8:	f000 ffd6 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_IRQ_Pin */
  GPIO_InitStruct.Pin = BLUE_IRQ_Pin;
 80008dc:	2320      	movs	r3, #32
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_GPIO_Init+0x148>)
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_IRQ_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	480c      	ldr	r0, [pc, #48]	; (8000920 <MX_GPIO_Init+0x14c>)
 80008f0:	f000 ffca 	bl	8001888 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	2017      	movs	r0, #23
 80008fa:	f000 ff30 	bl	800175e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008fe:	2017      	movs	r0, #23
 8000900:	f000 ff49 	bl	8001796 <HAL_NVIC_EnableIRQ>

}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	; 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000
 8000910:	48001800 	.word	0x48001800
 8000914:	48001c00 	.word	0x48001c00
 8000918:	48000400 	.word	0x48000400
 800091c:	10110000 	.word	0x10110000
 8000920:	48000800 	.word	0x48000800

08000924 <check_ble_ret_val>:

/**
 * @brief Function to check whether a returned tBleStatus is a success or not. Will block on an error
 * @param status status to check
 */
void check_ble_ret_val(tBleStatus status) {
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
	if (status != BLE_STATUS_SUCCESS) {
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d000      	beq.n	8000936 <check_ble_ret_val+0x12>
		while (1) {
 8000934:	e7fe      	b.n	8000934 <check_ble_ret_val+0x10>
		}
	}
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000946:	b672      	cpsid	i
}
 8000948:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800094a:	e7fe      	b.n	800094a <Error_Handler+0x8>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000956:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <HAL_MspInit+0x44>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6613      	str	r3, [r2, #96]	; 0x60
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_MspInit+0x44>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_MspInit+0x44>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6593      	str	r3, [r2, #88]	; 0x58
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_MspInit+0x44>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <NMI_Handler+0x4>

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>

080009a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 fd9e 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_5);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <EXTI9_5_IRQHandler+0x10>)
 80009ee:	f000 ff1b 	bl	8001828 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20001ebc 	.word	0x20001ebc

080009fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <SystemInit+0x5c>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <SystemInit+0x5c>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <SystemInit+0x60>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <SystemInit+0x60>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <SystemInit+0x60>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <SystemInit+0x60>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <SystemInit+0x60>)
 8000a28:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a2c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <SystemInit+0x60>)
 8000a34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a38:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <SystemInit+0x60>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <SystemInit+0x60>)
 8000a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a44:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <SystemInit+0x60>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00
 8000a5c:	40021000 	.word	0x40021000

08000a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a64:	f7ff ffca 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a6a:	e003      	b.n	8000a74 <LoopCopyDataInit>

08000a6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a72:	3104      	adds	r1, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a74:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a7c:	d3f6      	bcc.n	8000a6c <CopyDataInit>
	ldr	r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a80:	e002      	b.n	8000a88 <LoopFillZerobss>

08000a82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a84:	f842 3b04 	str.w	r3, [r2], #4

08000a88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <LoopForever+0x16>)
	cmp	r2, r3
 8000a8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a8c:	d3f9      	bcc.n	8000a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f003 fc0f 	bl	80042b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a92:	f7ff fe1b 	bl	80006cc <main>

08000a96 <LoopForever>:

LoopForever:
    b LoopForever
 8000a96:	e7fe      	b.n	8000a96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a98:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000a9c:	080043dc 	.word	0x080043dc
	ldr	r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000aa4:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000aa8:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000aac:	20002018 	.word	0x20002018

08000ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_2_IRQHandler>
	...

08000ab4 <set_counter_1_characteristic>:

/**
 * Function which sets a new value for the counter 1 and puts a new notification into the queue
 * @param value value as uint32_t which should be sent
 */
void set_counter_1_characteristic(uint32_t value) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	// If a new value arrives, store it and set the notification to be pending
	if (value != counter_1) {
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <set_counter_1_characteristic+0x2c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d005      	beq.n	8000ad2 <set_counter_1_characteristic+0x1e>
		counter_1 = value;
 8000ac6:	4a06      	ldr	r2, [pc, #24]	; (8000ae0 <set_counter_1_characteristic+0x2c>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6013      	str	r3, [r2, #0]
		counter_1_notification_pending = 1;
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <set_counter_1_characteristic+0x30>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
	}
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000138 	.word	0x20000138
 8000ae4:	20000134 	.word	0x20000134

08000ae8 <send_counter_1>:
 * Read (and notify) function for the counter_1 characteristic
 * @param service_callback callback struct to the service, containing all handlers for the service and the characteristic (and pointers to the callback functions)
 * @param len length of the received data
 * @param data pointer to the received data
 */
void send_counter_1(service_cb_handler_t *service_callback) {
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b08b      	sub	sp, #44	; 0x2c
 8000aec:	af02      	add	r7, sp, #8
 8000aee:	6078      	str	r0, [r7, #4]
	// If a central is connected
	if (is_connected()) {
 8000af0:	f000 fac0 	bl	8001074 <is_connected>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d072      	beq.n	8000be0 <send_counter_1+0xf8>
		// Create a buffer to convert the float into a bytearray
		uint8_t buffer[20] = { 0 };
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]

		// Parse the pressure value into the byte array
		BLUENRG_memcpy(buffer, &counter_1, sizeof(buffer));
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	2214      	movs	r2, #20
 8000b12:	4935      	ldr	r1, [pc, #212]	; (8000be8 <send_counter_1+0x100>)
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 fbef 	bl	80042f8 <memcpy>

		// Transmit the pressure value
		uint8_t ret_val = aci_gatt_update_char_value(service_callback->service_handler, service_callback->characteristic_callbacks[0].characteristic_handler,	0, sizeof(buffer), buffer);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	8818      	ldrh	r0, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	8899      	ldrh	r1, [r3, #4]
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2314      	movs	r3, #20
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f002 fe90 	bl	8003850 <aci_gatt_update_char_value>
 8000b30:	4603      	mov	r3, r0
 8000b32:	77fb      	strb	r3, [r7, #31]
		timestamp[i][0] =  HAL_GetTick();
 8000b34:	4b2d      	ldr	r3, [pc, #180]	; (8000bec <send_counter_1+0x104>)
 8000b36:	681c      	ldr	r4, [r3, #0]
 8000b38:	f000 fd06 	bl	8001548 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	492c      	ldr	r1, [pc, #176]	; (8000bf0 <send_counter_1+0x108>)
 8000b40:	4623      	mov	r3, r4
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4423      	add	r3, r4
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	440b      	add	r3, r1
 8000b4a:	601a      	str	r2, [r3, #0]
		timestamp[i][1] = timestamp[i][0] - timestamp[i-1][0];
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <send_counter_1+0x104>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4927      	ldr	r1, [pc, #156]	; (8000bf0 <send_counter_1+0x108>)
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	6819      	ldr	r1, [r3, #0]
 8000b5e:	4b23      	ldr	r3, [pc, #140]	; (8000bec <send_counter_1+0x104>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	1e5a      	subs	r2, r3, #1
 8000b64:	4822      	ldr	r0, [pc, #136]	; (8000bf0 <send_counter_1+0x108>)
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4403      	add	r3, r0
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <send_counter_1+0x104>)
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	1ac9      	subs	r1, r1, r3
 8000b78:	481d      	ldr	r0, [pc, #116]	; (8000bf0 <send_counter_1+0x108>)
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4413      	add	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4403      	add	r3, r0
 8000b84:	3304      	adds	r3, #4
 8000b86:	6019      	str	r1, [r3, #0]
		timestamp[i][2] = counter_1;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <send_counter_1+0x104>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <send_counter_1+0x100>)
 8000b8e:	6819      	ldr	r1, [r3, #0]
 8000b90:	4817      	ldr	r0, [pc, #92]	; (8000bf0 <send_counter_1+0x108>)
 8000b92:	4613      	mov	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4403      	add	r3, r0
 8000b9c:	3308      	adds	r3, #8
 8000b9e:	6019      	str	r1, [r3, #0]
		i++;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <send_counter_1+0x104>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	4a11      	ldr	r2, [pc, #68]	; (8000bec <send_counter_1+0x104>)
 8000ba8:	6013      	str	r3, [r2, #0]
		if (ret_val != 0) {
 8000baa:	7ffb      	ldrb	r3, [r7, #31]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d012      	beq.n	8000bd6 <send_counter_1+0xee>
			errors[counter][0] = ret_val;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <send_counter_1+0x10c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	7ffa      	ldrb	r2, [r7, #31]
 8000bb6:	4910      	ldr	r1, [pc, #64]	; (8000bf8 <send_counter_1+0x110>)
 8000bb8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			errors[counter][1] = counter_1;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <send_counter_1+0x10c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a09      	ldr	r2, [pc, #36]	; (8000be8 <send_counter_1+0x100>)
 8000bc2:	6812      	ldr	r2, [r2, #0]
 8000bc4:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <send_counter_1+0x110>)
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	440b      	add	r3, r1
 8000bca:	605a      	str	r2, [r3, #4]
			counter++; }
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <send_counter_1+0x10c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <send_counter_1+0x10c>)
 8000bd4:	6013      	str	r3, [r2, #0]
		if (counter == 100)
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <send_counter_1+0x10c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b64      	cmp	r3, #100	; 0x64
 8000bdc:	d100      	bne.n	8000be0 <send_counter_1+0xf8>
			while(1)
 8000bde:	e7fe      	b.n	8000bde <send_counter_1+0xf6>
			{

			}
	}
}
 8000be0:	bf00      	nop
 8000be2:	3724      	adds	r7, #36	; 0x24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd90      	pop	{r4, r7, pc}
 8000be8:	20000138 	.word	0x20000138
 8000bec:	20000004 	.word	0x20000004
 8000bf0:	20000464 	.word	0x20000464
 8000bf4:	20000140 	.word	0x20000140
 8000bf8:	20000144 	.word	0x20000144

08000bfc <send_counter_2>:
 * Read (and notify) function for the counter_2 characteristic
 * @param service_callback callback struct to the service, containing all handlers for the service and the characteristic (and pointers to the callback functions)
 * @param len length of the received data
 * @param data pointer to the received data
 */
void send_counter_2(service_cb_handler_t *service_callback) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	6078      	str	r0, [r7, #4]
	// If a central is connected
	if (is_connected()) {
 8000c04:	f000 fa36 	bl	8001074 <is_connected>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d02c      	beq.n	8000c68 <send_counter_2+0x6c>
		// Create a buffer to convert the float into a bytearray
		uint8_t buffer[4] = { 0 };
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <send_counter_2+0x74>)
 8000c14:	681b      	ldr	r3, [r3, #0]

		// Parse the pressure value into the byte array
		BLUENRG_memcpy(buffer, &counter_2, sizeof(buffer));
 8000c16:	60bb      	str	r3, [r7, #8]

		// Transmit the pressure value
		uint8_t ret_val = aci_gatt_update_char_value(service_callback->service_handler, service_callback->characteristic_callbacks[1].characteristic_handler,	0, sizeof(buffer), buffer);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	8818      	ldrh	r0, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2304      	movs	r3, #4
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f002 fe11 	bl	8003850 <aci_gatt_update_char_value>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	73fb      	strb	r3, [r7, #15]
		if (ret_val != 0) {
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d012      	beq.n	8000c5e <send_counter_2+0x62>
			errors[counter][0] = ret_val;
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <send_counter_2+0x78>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	7bfa      	ldrb	r2, [r7, #15]
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <send_counter_2+0x7c>)
 8000c40:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			errors[counter][1] = counter_2;
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <send_counter_2+0x78>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a09      	ldr	r2, [pc, #36]	; (8000c70 <send_counter_2+0x74>)
 8000c4a:	6812      	ldr	r2, [r2, #0]
 8000c4c:	490a      	ldr	r1, [pc, #40]	; (8000c78 <send_counter_2+0x7c>)
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	440b      	add	r3, r1
 8000c52:	605a      	str	r2, [r3, #4]
			counter++; }
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <send_counter_2+0x78>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <send_counter_2+0x78>)
 8000c5c:	6013      	str	r3, [r2, #0]
		if (counter == 100)
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <send_counter_2+0x78>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b64      	cmp	r3, #100	; 0x64
 8000c64:	d100      	bne.n	8000c68 <send_counter_2+0x6c>
			while(1)
 8000c66:	e7fe      	b.n	8000c66 <send_counter_2+0x6a>
			{

			}
	}
}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2000013c 	.word	0x2000013c
 8000c74:	20000140 	.word	0x20000140
 8000c78:	20000144 	.word	0x20000144

08000c7c <add_counter_service>:
/**
 * Function which adds the Counter service to the GATT server
 * @param service_callback callback struct to the service, containing all handlers for the service and the characteristic (and pointers to the callback functions)
 * @return tBleStatus, indicating an error. BLE_STATUS_SUCCESS on success.
 */
tBleStatus add_counter_service(service_cb_handler_t *service_callback) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af06      	add	r7, sp, #24
 8000c82:	6078      	str	r0, [r7, #4]
	tBleStatus ret_val;

	// Copy pointers to handles of the service and the different characteristics
	uint16_t *counter_service_handle = &service_callback->service_handler;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	617b      	str	r3, [r7, #20]
	uint16_t *counter_1_characteristic_handle = &service_callback->characteristic_callbacks[0].characteristic_handler;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	613b      	str	r3, [r7, #16]
	uint16_t *counter_2_characteristic_handle = &service_callback->characteristic_callbacks[1].characteristic_handler;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3328      	adds	r3, #40	; 0x28
 8000c92:	60fb      	str	r3, [r7, #12]

	// Add the serivce to the GATT server using its UUID (16bit). Store its handle into the previously defined pointer.
	// Configure it as primary service, having a max. of 7 attributes
	ret_val = aci_gatt_add_serv(UUID_TYPE_128, counter_service_uuid, PRIMARY_SERVICE, 0x07, counter_service_handle);
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2307      	movs	r3, #7
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	492a      	ldr	r1, [pc, #168]	; (8000d48 <add_counter_service+0xcc>)
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	f002 fc78 	bl	8003594 <aci_gatt_add_serv>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	72fb      	strb	r3, [r7, #11]
	if (ret_val != BLE_STATUS_SUCCESS)
 8000ca8:	7afb      	ldrb	r3, [r7, #11]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <add_counter_service+0x36>
		return ret_val;
 8000cae:	7afb      	ldrb	r3, [r7, #11]
 8000cb0:	e046      	b.n	8000d40 <add_counter_service+0xc4>

	// Add the counter_1 characteristic to the service stored in the service_handle. Store its handle into the previously defined pointer.
	// The characteristic consists of 5bytes, has possibility for NOTIFY and READ, needs no bonding/permission.
	ret_val = aci_gatt_add_char(*counter_service_handle, UUID_TYPE_128, counter_1_char_uuid, 20, CHAR_PROP_NOTIFY | CHAR_PROP_READ,
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	8818      	ldrh	r0, [r3, #0]
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	9305      	str	r3, [sp, #20]
 8000cba:	2301      	movs	r3, #1
 8000cbc:	9304      	str	r3, [sp, #16]
 8000cbe:	2310      	movs	r3, #16
 8000cc0:	9303      	str	r3, [sp, #12]
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	9302      	str	r3, [sp, #8]
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	2312      	movs	r3, #18
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2314      	movs	r3, #20
 8000cd0:	4a1e      	ldr	r2, [pc, #120]	; (8000d4c <add_counter_service+0xd0>)
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	f002 fcea 	bl	80036ac <aci_gatt_add_char>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	72fb      	strb	r3, [r7, #11]
			ATTR_PERMISSION_NONE, GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP, 16, 1, counter_1_characteristic_handle);
	if (ret_val != BLE_STATUS_SUCCESS)
 8000cdc:	7afb      	ldrb	r3, [r7, #11]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <add_counter_service+0x6a>
		return ret_val;
 8000ce2:	7afb      	ldrb	r3, [r7, #11]
 8000ce4:	e02c      	b.n	8000d40 <add_counter_service+0xc4>

	// Store the characteristics callback functions in the callback struct, s.t. the event handler can call it
	service_callback->characteristic_callbacks[0].read = send_counter_1;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <add_counter_service+0xd4>)
 8000cea:	619a      	str	r2, [r3, #24]
	service_callback->characteristic_callbacks[0].notify = send_counter_1;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <add_counter_service+0xd4>)
 8000cf0:	61da      	str	r2, [r3, #28]
	service_callback->characteristic_callbacks[0].notification_pending = &counter_1_notification_pending;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <add_counter_service+0xd8>)
 8000cf6:	625a      	str	r2, [r3, #36]	; 0x24

	// Add the counter_2 characteristic to the service stored in the service_handle. Store its handle into the previously defined pointer.
	// The characteristic consists of 4bytes, has possibility for NOTIFY and READ, needs no bonding/permission.
	ret_val = aci_gatt_add_char(*counter_service_handle, UUID_TYPE_128, counter_2_char_uuid, 4,	CHAR_PROP_NOTIFY | CHAR_PROP_READ,
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	8818      	ldrh	r0, [r3, #0]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	9305      	str	r3, [sp, #20]
 8000d00:	2301      	movs	r3, #1
 8000d02:	9304      	str	r3, [sp, #16]
 8000d04:	2310      	movs	r3, #16
 8000d06:	9303      	str	r3, [sp, #12]
 8000d08:	2304      	movs	r3, #4
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	2312      	movs	r3, #18
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2304      	movs	r3, #4
 8000d16:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <add_counter_service+0xdc>)
 8000d18:	2102      	movs	r1, #2
 8000d1a:	f002 fcc7 	bl	80036ac <aci_gatt_add_char>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	72fb      	strb	r3, [r7, #11]
			ATTR_PERMISSION_NONE, GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP, 16, 1, counter_2_characteristic_handle);
	if (ret_val != BLE_STATUS_SUCCESS)
 8000d22:	7afb      	ldrb	r3, [r7, #11]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <add_counter_service+0xb0>
		return ret_val;
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	e009      	b.n	8000d40 <add_counter_service+0xc4>

	// Store the characteristics callback functions in the callback struct, s.t. the event handler can call it
	service_callback->characteristic_callbacks[1].read = send_counter_2;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <add_counter_service+0xe0>)
 8000d30:	63da      	str	r2, [r3, #60]	; 0x3c
	service_callback->characteristic_callbacks[1].notify = send_counter_2;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <add_counter_service+0xe0>)
 8000d36:	641a      	str	r2, [r3, #64]	; 0x40
	service_callback->characteristic_callbacks[1].notification_pending = &counter_2_notification_pending;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a09      	ldr	r2, [pc, #36]	; (8000d60 <add_counter_service+0xe4>)
 8000d3c:	649a      	str	r2, [r3, #72]	; 0x48

	return ret_val;
 8000d3e:	7afb      	ldrb	r3, [r7, #11]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	080043a4 	.word	0x080043a4
 8000d4c:	080043b4 	.word	0x080043b4
 8000d50:	08000ae9 	.word	0x08000ae9
 8000d54:	20000134 	.word	0x20000134
 8000d58:	080043c4 	.word	0x080043c4
 8000d5c:	08000bfd 	.word	0x08000bfd
 8000d60:	20000135 	.word	0x20000135

08000d64 <MX_BlueNRG_MS_Init>:

/**
 * @brief Function to initialize BLE
 * @return tBleStatus, indicating an error. BLE_STATUS_SUCCESS on success.
 */
tBleStatus MX_BlueNRG_MS_Init(void) {
 8000d64:	b5b0      	push	{r4, r5, r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af02      	add	r7, sp, #8
	tBleStatus ret_val = BLE_STATUS_SUCCESS;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	75fb      	strb	r3, [r7, #23]

	const char *name = DEVICE_NAME;
 8000d6e:	4b35      	ldr	r3, [pc, #212]	; (8000e44 <MX_BlueNRG_MS_Init+0xe0>)
 8000d70:	613b      	str	r3, [r7, #16]
	uint8_t bdaddr[BLUETOOTH_DEVICE_ADDRESS_SIZE] = BLUETOOTH_DEVICE_ADDRESS;
 8000d72:	4a35      	ldr	r2, [pc, #212]	; (8000e48 <MX_BlueNRG_MS_Init+0xe4>)
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d7c:	6018      	str	r0, [r3, #0]
 8000d7e:	3304      	adds	r3, #4
 8000d80:	8019      	strh	r1, [r3, #0]

	uint16_t service_handle,
	dev_name_char_handle, appearance_char_handle;

	// Initialize the SPI and reset the module
	hci_init(&event_user_notify, NULL);
 8000d82:	2100      	movs	r1, #0
 8000d84:	4831      	ldr	r0, [pc, #196]	; (8000e4c <MX_BlueNRG_MS_Init+0xe8>)
 8000d86:	f002 ff87 	bl	8003c98 <hci_init>
	ret_val = hci_reset();
 8000d8a:	f002 fe87 	bl	8003a9c <hci_reset>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	75fb      	strb	r3, [r7, #23]
	if (ret_val != BLE_STATUS_SUCCESS)
 8000d92:	7dfb      	ldrb	r3, [r7, #23]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_BlueNRG_MS_Init+0x38>
		return ret_val;
 8000d98:	7dfb      	ldrb	r3, [r7, #23]
 8000d9a:	e04f      	b.n	8000e3c <MX_BlueNRG_MS_Init+0xd8>

	HAL_Delay(100);
 8000d9c:	2064      	movs	r0, #100	; 0x64
 8000d9e:	f000 fbdf 	bl	8001560 <HAL_Delay>

	// Configure BLE device address
	ret_val = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	461a      	mov	r2, r3
 8000da8:	2106      	movs	r1, #6
 8000daa:	2000      	movs	r0, #0
 8000dac:	f002 fe0f 	bl	80039ce <aci_hal_write_config_data>
 8000db0:	4603      	mov	r3, r0
 8000db2:	75fb      	strb	r3, [r7, #23]
	if (ret_val != BLE_STATUS_SUCCESS)
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_BlueNRG_MS_Init+0x5a>
		return ret_val;
 8000dba:	7dfb      	ldrb	r3, [r7, #23]
 8000dbc:	e03e      	b.n	8000e3c <MX_BlueNRG_MS_Init+0xd8>

	// Used BLE chip is IDB05A1
	// Initialize gatt
	ret_val = aci_gatt_init();
 8000dbe:	f002 fbc6 	bl	800354e <aci_gatt_init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	75fb      	strb	r3, [r7, #23]
	if (ret_val != BLE_STATUS_SUCCESS)
 8000dc6:	7dfb      	ldrb	r3, [r7, #23]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_BlueNRG_MS_Init+0x6c>
		return ret_val;
 8000dcc:	7dfb      	ldrb	r3, [r7, #23]
 8000dce:	e035      	b.n	8000e3c <MX_BlueNRG_MS_Init+0xd8>

	// Initialize GAP
	ret_val = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, strlen(name), &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000dd0:	6938      	ldr	r0, [r7, #16]
 8000dd2:	f7ff f9f9 	bl	80001c8 <strlen>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	1db9      	adds	r1, r7, #6
 8000ddc:	1cbb      	adds	r3, r7, #2
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	460b      	mov	r3, r1
 8000de6:	2100      	movs	r1, #0
 8000de8:	2001      	movs	r0, #1
 8000dea:	f002 fa71 	bl	80032d0 <aci_gap_init_IDB05A1>
 8000dee:	4603      	mov	r3, r0
 8000df0:	75fb      	strb	r3, [r7, #23]
	if (ret_val != BLE_STATUS_SUCCESS)
 8000df2:	7dfb      	ldrb	r3, [r7, #23]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_BlueNRG_MS_Init+0x98>
		return ret_val;
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
 8000dfa:	e01f      	b.n	8000e3c <MX_BlueNRG_MS_Init+0xd8>

	// Set name as characteristic value
	ret_val = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t*) name);
 8000dfc:	88fc      	ldrh	r4, [r7, #6]
 8000dfe:	88bd      	ldrh	r5, [r7, #4]
 8000e00:	6938      	ldr	r0, [r7, #16]
 8000e02:	f7ff f9e1 	bl	80001c8 <strlen>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	2200      	movs	r2, #0
 8000e12:	4629      	mov	r1, r5
 8000e14:	4620      	mov	r0, r4
 8000e16:	f002 fd1b 	bl	8003850 <aci_gatt_update_char_value>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	75fb      	strb	r3, [r7, #23]
	if (ret_val != BLE_STATUS_SUCCESS)
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_BlueNRG_MS_Init+0xc4>
		return ret_val;
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	e009      	b.n	8000e3c <MX_BlueNRG_MS_Init+0xd8>

	// Initialize services
	ret_val = add_services();
 8000e28:	f000 fb0c 	bl	8001444 <add_services>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	75fb      	strb	r3, [r7, #23]
	if (ret_val != BLE_STATUS_SUCCESS)
 8000e30:	7dfb      	ldrb	r3, [r7, #23]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_BlueNRG_MS_Init+0xd6>
		return ret_val;
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	e000      	b.n	8000e3c <MX_BlueNRG_MS_Init+0xd8>

	return ret_val;
 8000e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bdb0      	pop	{r4, r5, r7, pc}
 8000e44:	0800434c 	.word	0x0800434c
 8000e48:	0800435c 	.word	0x0800435c
 8000e4c:	08000fed 	.word	0x08000fed

08000e50 <MX_BlueNRG_MS_Process>:

/**
 * @brief Process BLE events and send notifications
 * @return tBleStatus, indicating an error. BLE_STATUS_SUCCESS on success.
 */
tBleStatus MX_BlueNRG_MS_Process(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
	tBleStatus ret_val = BLE_STATUS_SUCCESS;
 8000e56:	2300      	movs	r3, #0
 8000e58:	71fb      	strb	r3, [r7, #7]

	// If the device is connectable, try to establish a connection
	if (connectable == 1) {
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_BlueNRG_MS_Process+0x38>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d108      	bne.n	8000e74 <MX_BlueNRG_MS_Process+0x24>
		ret_val = establish_connection();
 8000e62:	f000 f82b 	bl	8000ebc <establish_connection>
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
		if (ret_val != BLE_STATUS_SUCCESS)
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_BlueNRG_MS_Process+0x24>
			return ret_val;
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	e004      	b.n	8000e7e <MX_BlueNRG_MS_Process+0x2e>
	}

	// Send all pending notifications
	send_notification();
 8000e74:	f000 fa68 	bl	8001348 <send_notification>

	// Handle all events
	hci_user_evt_proc();
 8000e78:	f003 f88a 	bl	8003f90 <hci_user_evt_proc>

	return ret_val;
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008

08000e8c <set_connectable_status>:

/**
 * @brief Function to set the device into connectable mode
 */
void set_connectable_status(void) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
	connectable = 1;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <set_connectable_status+0x14>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	20000008 	.word	0x20000008

08000ea4 <clear_connectable_status>:

/**
 * @brief Function to clear the connectable mode, stops advertising and starts the GATT server
 */
void clear_connectable_status(void) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
	connectable = 0;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <clear_connectable_status+0x14>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	20000008 	.word	0x20000008

08000ebc <establish_connection>:

/**
 * @brief Function called by event handler once a new connection should be established
 * @return tBleStatus, indicating an error. BLE_STATUS_SUCCESS on success.
 */
tBleStatus establish_connection(void) {
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b08d      	sub	sp, #52	; 0x34
 8000ec0:	af08      	add	r7, sp, #32
	tBleStatus ret_val = BLE_STATUS_SUCCESS;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]

	// Set the device name
	char local_name[DEVICE_NAME_SIZE + 2] = { 0 };
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	f8c3 2007 	str.w	r2, [r3, #7]
	local_name[0] = AD_TYPE_COMPLETE_LOCAL_NAME;
 8000ed6:	2309      	movs	r3, #9
 8000ed8:	703b      	strb	r3, [r7, #0]
	strncpy(&local_name[1], DEVICE_NAME, DEVICE_NAME_SIZE + 1);
 8000eda:	463b      	mov	r3, r7
 8000edc:	3301      	adds	r3, #1
 8000ede:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <establish_connection+0xa0>)
 8000ee0:	461c      	mov	r4, r3
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ee6:	6020      	str	r0, [r4, #0]
 8000ee8:	6061      	str	r1, [r4, #4]
 8000eea:	60a2      	str	r2, [r4, #8]
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	81a3      	strh	r3, [r4, #12]

	// Set the BLE scan response
	ret_val = hci_le_set_scan_resp_data(0, NULL);
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f002 fdf4 	bl	8003ae0 <hci_le_set_scan_resp_data>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	73fb      	strb	r3, [r7, #15]
	if ((ret_val != BLE_STATUS_SUCCESS) && (ret_val != ERR_COMMAND_DISALLOWED))
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d004      	beq.n	8000f0c <establish_connection+0x50>
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2b0c      	cmp	r3, #12
 8000f06:	d001      	beq.n	8000f0c <establish_connection+0x50>
		return ret_val;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	e023      	b.n	8000f54 <establish_connection+0x98>

	// Set the device as discoverable
	ret_val = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR,
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9306      	str	r3, [sp, #24]
 8000f10:	2300      	movs	r3, #0
 8000f12:	9305      	str	r3, [sp, #20]
 8000f14:	2300      	movs	r3, #0
 8000f16:	9304      	str	r3, [sp, #16]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	9303      	str	r3, [sp, #12]
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	230e      	movs	r3, #14
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	2300      	movs	r3, #0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f002 fa1e 	bl	8003370 <aci_gap_set_discoverable>
 8000f34:	4603      	mov	r3, r0
 8000f36:	73fb      	strb	r3, [r7, #15]
	NO_WHITE_LIST_USE, DEVICE_NAME_SIZE + 1, local_name, 0,
	NULL, 0, 0);
	if ((ret_val != BLE_STATUS_SUCCESS) && (ret_val != ERR_COMMAND_DISALLOWED))
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d004      	beq.n	8000f48 <establish_connection+0x8c>
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	2b0c      	cmp	r3, #12
 8000f42:	d001      	beq.n	8000f48 <establish_connection+0x8c>
		return ret_val;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	e005      	b.n	8000f54 <establish_connection+0x98>

	if (ret_val == ERR_COMMAND_DISALLOWED)
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	2b0c      	cmp	r3, #12
 8000f4c:	d101      	bne.n	8000f52 <establish_connection+0x96>
		ret_val = BLE_STATUS_SUCCESS;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
	return ret_val;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	0800434c 	.word	0x0800434c

08000f60 <meta_event_handler>:

/**
 * @brief Handler for meta events
 * @param hci_meta_evt is the pointer to the data
 */
void meta_event_handler(evt_le_meta_event *hci_meta_evt) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	// Connect on connection event, stop advertising
	if(hci_meta_evt->subevent == EVT_LE_CONN_COMPLETE) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d10c      	bne.n	8000f8a <meta_event_handler+0x2a>
		evt_le_connection_complete *hci_con_comp_evt = (void*) hci_meta_evt->data;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3301      	adds	r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
		cb_on_gap_connection_complete(hci_con_comp_evt->peer_bdaddr, hci_con_comp_evt->handle);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1d5a      	adds	r2, r3, #5
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	4619      	mov	r1, r3
 8000f84:	4610      	mov	r0, r2
 8000f86:	f000 f881 	bl	800108c <cb_on_gap_connection_complete>
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <vendor_event_handler>:

/**
 * @brief Handler for vendor events
 * @param vendor_evt is the pointer to the data
 */
void vendor_event_handler(evt_blue_aci *vendor_evt) {
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
	if (vendor_evt->ecode == EVT_BLUE_GATT_READ_PERMIT_REQ) {
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	f640 4214 	movw	r2, #3092	; 0xc14
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d109      	bne.n	8000fbc <vendor_event_handler+0x2a>
		// Handle a read request
		evt_gatt_read_permit_req *read_pmt_req_evt = (void*) vendor_evt->data;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3302      	adds	r3, #2
 8000fac:	60bb      	str	r3, [r7, #8]
		cb_on_read_request(read_pmt_req_evt->attr_handle);
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	885b      	ldrh	r3, [r3, #2]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f8bb 	bl	8001130 <cb_on_read_request>
	} else if(vendor_evt->ecode == EVT_BLUE_GATT_ATTRIBUTE_MODIFIED) {
		// Handle a modify or notify request
		evt_gatt_attr_modified_IDB05A1 *attr_modified_evt =	(void*) vendor_evt->data;
		cb_on_attribute_modified(attr_modified_evt->attr_handle, attr_modified_evt->data_length, attr_modified_evt->att_data);
	}
}
 8000fba:	e013      	b.n	8000fe4 <vendor_event_handler+0x52>
	} else if(vendor_evt->ecode == EVT_BLUE_GATT_ATTRIBUTE_MODIFIED) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	f640 4201 	movw	r2, #3073	; 0xc01
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d10c      	bne.n	8000fe4 <vendor_event_handler+0x52>
		evt_gatt_attr_modified_IDB05A1 *attr_modified_evt =	(void*) vendor_evt->data;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3302      	adds	r3, #2
 8000fce:	60fb      	str	r3, [r7, #12]
		cb_on_attribute_modified(attr_modified_evt->attr_handle, attr_modified_evt->data_length, attr_modified_evt->att_data);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	885b      	ldrh	r3, [r3, #2]
 8000fd4:	b298      	uxth	r0, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	7919      	ldrb	r1, [r3, #4]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3307      	adds	r3, #7
 8000fde:	461a      	mov	r2, r3
 8000fe0:	f000 f916 	bl	8001210 <cb_on_attribute_modified>
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <event_user_notify>:

/**
 * @brief Event handler on a BLE event, manages connections, advertising and handles read/write/notify requests
 * @param pData is the pointer to the BLE event
 */
void event_user_notify(void *pData) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	hci_uart_pckt *hci_pkt = pData;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	617b      	str	r3, [r7, #20]
	hci_event_pckt *hci_evt_pkt = (void*) hci_pkt->data;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	613b      	str	r3, [r7, #16]

	if (hci_pkt->type != HCI_EVENT_PKT)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b04      	cmp	r3, #4
 8001004:	d11c      	bne.n	8001040 <event_user_notify+0x54>
		return;

	if (hci_evt_pkt->evt == EVT_DISCONN_COMPLETE) {
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b05      	cmp	r3, #5
 800100c:	d102      	bne.n	8001014 <event_user_notify+0x28>
			// Disconnect on disconnection event
			cb_on_gap_disconnection_complete();
 800100e:	f000 f853 	bl	80010b8 <cb_on_gap_disconnection_complete>
 8001012:	e016      	b.n	8001042 <event_user_notify+0x56>
	} else if(hci_evt_pkt->evt == EVT_LE_META_EVENT) {
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b3e      	cmp	r3, #62	; 0x3e
 800101a:	d106      	bne.n	800102a <event_user_notify+0x3e>
			evt_le_meta_event *hci_meta_evt = (void*) hci_evt_pkt->data;
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	3302      	adds	r3, #2
 8001020:	60bb      	str	r3, [r7, #8]
			meta_event_handler(hci_meta_evt);
 8001022:	68b8      	ldr	r0, [r7, #8]
 8001024:	f7ff ff9c 	bl	8000f60 <meta_event_handler>
 8001028:	e00b      	b.n	8001042 <event_user_notify+0x56>
	} else if(hci_evt_pkt->evt == EVT_VENDOR) {
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2bff      	cmp	r3, #255	; 0xff
 8001030:	d107      	bne.n	8001042 <event_user_notify+0x56>
		    evt_blue_aci *hci_event_vendor = (void*) hci_evt_pkt->data;
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	3302      	adds	r3, #2
 8001036:	60fb      	str	r3, [r7, #12]
			vendor_event_handler(hci_event_vendor);
 8001038:	68f8      	ldr	r0, [r7, #12]
 800103a:	f7ff ffaa 	bl	8000f92 <vendor_event_handler>
 800103e:	e000      	b.n	8001042 <event_user_notify+0x56>
		return;
 8001040:	bf00      	nop
	}
}
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <set_cb_functions>:
 * Function which initalizes the local_service_callbacks variable by assigning a pointer
 * @param arg_service_callbacks pointer to an array which contains the service callback functions
 * @param arg_service_callbacks_length length of the array
 */
void set_cb_functions(service_cb_handler_t *arg_service_callbacks,
		uint8_t arg_service_callbacks_length) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
	local_service_callbacks = arg_service_callbacks;
 8001054:	4a05      	ldr	r2, [pc, #20]	; (800106c <set_cb_functions+0x24>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
	local_service_callbacks_length = arg_service_callbacks_length;
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <set_cb_functions+0x28>)
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	7013      	strb	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	20001bd8 	.word	0x20001bd8
 8001070:	20001bdc 	.word	0x20001bdc

08001074 <is_connected>:

/**
 * Function to check whether the BLE is connected to a central
 * @return 1 if connected, else 0
 */
uint8_t is_connected(void) {
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	return connected;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <is_connected+0x14>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b2db      	uxtb	r3, r3
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	20001bd4 	.word	0x20001bd4

0800108c <cb_on_gap_connection_complete>:
/**
 * Callback function called by event handler once a connection is established
 * @param peer_addr address of the central
 * @param handle handle to the connection
 */
void cb_on_gap_connection_complete(uint8_t peer_addr[], uint16_t handle) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
	connected = 1;
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <cb_on_gap_connection_complete+0x24>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
	connection_handle = handle;
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <cb_on_gap_connection_complete+0x28>)
 80010a0:	887b      	ldrh	r3, [r7, #2]
 80010a2:	8013      	strh	r3, [r2, #0]

	clear_connectable_status();
 80010a4:	f7ff fefe 	bl	8000ea4 <clear_connectable_status>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20001bd4 	.word	0x20001bd4
 80010b4:	20001bd6 	.word	0x20001bd6

080010b8 <cb_on_gap_disconnection_complete>:

/**
 * Callback function called by event handler once a connection is terminated
 */
void cb_on_gap_disconnection_complete(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	connected = 0;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <cb_on_gap_disconnection_complete+0x68>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
	connection_handle = 0;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <cb_on_gap_disconnection_complete+0x6c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	801a      	strh	r2, [r3, #0]

	// Disable all notifications for all services and characteristics
	for (uint8_t i = 0; i < local_service_callbacks_length; i++) {
 80010ca:	2300      	movs	r3, #0
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	e01b      	b.n	8001108 <cb_on_gap_disconnection_complete+0x50>
		for (uint8_t j = 0;	j < sizeof(local_service_callbacks[i].characteristic_callbacks) / sizeof(characteristic_cb_handler_t); j++) {
 80010d0:	2300      	movs	r3, #0
 80010d2:	71bb      	strb	r3, [r7, #6]
 80010d4:	e012      	b.n	80010fc <cb_on_gap_disconnection_complete+0x44>
			local_service_callbacks[i].characteristic_callbacks[j].notification_enabled = 0;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <cb_on_gap_disconnection_complete+0x70>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	21dc      	movs	r1, #220	; 0xdc
 80010de:	fb01 f303 	mul.w	r3, r1, r3
 80010e2:	18d1      	adds	r1, r2, r3
 80010e4:	79ba      	ldrb	r2, [r7, #6]
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	3320      	adds	r3, #32
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0;	j < sizeof(local_service_callbacks[i].characteristic_callbacks) / sizeof(characteristic_cb_handler_t); j++) {
 80010f6:	79bb      	ldrb	r3, [r7, #6]
 80010f8:	3301      	adds	r3, #1
 80010fa:	71bb      	strb	r3, [r7, #6]
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	2b05      	cmp	r3, #5
 8001100:	d9e9      	bls.n	80010d6 <cb_on_gap_disconnection_complete+0x1e>
	for (uint8_t i = 0; i < local_service_callbacks_length; i++) {
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	3301      	adds	r3, #1
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <cb_on_gap_disconnection_complete+0x74>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	79fa      	ldrb	r2, [r7, #7]
 800110e:	429a      	cmp	r2, r3
 8001110:	d3de      	bcc.n	80010d0 <cb_on_gap_disconnection_complete+0x18>
		}
	}

	set_connectable_status();
 8001112:	f7ff febb 	bl	8000e8c <set_connectable_status>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20001bd4 	.word	0x20001bd4
 8001124:	20001bd6 	.word	0x20001bd6
 8001128:	20001bd8 	.word	0x20001bd8
 800112c:	20001bdc 	.word	0x20001bdc

08001130 <cb_on_read_request>:

/**
 * Callback function called when a characteristic read is requested
 * @param handle handle to the request
 */
void cb_on_read_request(uint16_t handle) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]

	// Iterate over all services and characteristics to find whose read handle is requested
	for (uint8_t i = 0; i < local_service_callbacks_length; i++) {
 800113a:	2300      	movs	r3, #0
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e047      	b.n	80011d0 <cb_on_read_request+0xa0>
		for (uint8_t j = 0; j < sizeof(local_service_callbacks[i].characteristic_callbacks)	/ sizeof(characteristic_cb_handler_t); j++) {
 8001140:	2300      	movs	r3, #0
 8001142:	73bb      	strb	r3, [r7, #14]
 8001144:	e03e      	b.n	80011c4 <cb_on_read_request+0x94>
			if (local_service_callbacks[i].characteristic_callbacks[j].characteristic_handler + 1 == handle) {
 8001146:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <cb_on_read_request+0xd0>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	21dc      	movs	r1, #220	; 0xdc
 800114e:	fb01 f303 	mul.w	r3, r1, r3
 8001152:	18d1      	adds	r1, r2, r3
 8001154:	7bba      	ldrb	r2, [r7, #14]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	3304      	adds	r3, #4
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	429a      	cmp	r2, r3
 800116a:	d128      	bne.n	80011be <cb_on_read_request+0x8e>
				if (local_service_callbacks[i].characteristic_callbacks[j].read	!= NULL) {
 800116c:	4b24      	ldr	r3, [pc, #144]	; (8001200 <cb_on_read_request+0xd0>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	21dc      	movs	r1, #220	; 0xdc
 8001174:	fb01 f303 	mul.w	r3, r1, r3
 8001178:	18d1      	adds	r1, r2, r3
 800117a:	7bba      	ldrb	r2, [r7, #14]
 800117c:	4613      	mov	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	3318      	adds	r3, #24
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d017      	beq.n	80011be <cb_on_read_request+0x8e>
					local_service_callbacks[i].characteristic_callbacks[j].read(&local_service_callbacks[i]);
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <cb_on_read_request+0xd0>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	21dc      	movs	r1, #220	; 0xdc
 8001196:	fb01 f303 	mul.w	r3, r1, r3
 800119a:	18d1      	adds	r1, r2, r3
 800119c:	7bba      	ldrb	r2, [r7, #14]
 800119e:	4613      	mov	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	3318      	adds	r3, #24
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <cb_on_read_request+0xd0>)
 80011ae:	6811      	ldr	r1, [r2, #0]
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	20dc      	movs	r0, #220	; 0xdc
 80011b4:	fb00 f202 	mul.w	r2, r0, r2
 80011b8:	440a      	add	r2, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4798      	blx	r3
		for (uint8_t j = 0; j < sizeof(local_service_callbacks[i].characteristic_callbacks)	/ sizeof(characteristic_cb_handler_t); j++) {
 80011be:	7bbb      	ldrb	r3, [r7, #14]
 80011c0:	3301      	adds	r3, #1
 80011c2:	73bb      	strb	r3, [r7, #14]
 80011c4:	7bbb      	ldrb	r3, [r7, #14]
 80011c6:	2b05      	cmp	r3, #5
 80011c8:	d9bd      	bls.n	8001146 <cb_on_read_request+0x16>
	for (uint8_t i = 0; i < local_service_callbacks_length; i++) {
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	3301      	adds	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <cb_on_read_request+0xd4>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d3b2      	bcc.n	8001140 <cb_on_read_request+0x10>
				}
			}
		}
	}

	if (connected && connection_handle != 0) {
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <cb_on_read_request+0xd8>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d008      	beq.n	80011f6 <cb_on_read_request+0xc6>
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <cb_on_read_request+0xdc>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d004      	beq.n	80011f6 <cb_on_read_request+0xc6>
		aci_gatt_allow_read(connection_handle);
 80011ec:	4b07      	ldr	r3, [pc, #28]	; (800120c <cb_on_read_request+0xdc>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 fbbf 	bl	8003974 <aci_gatt_allow_read>
	}
}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20001bd8 	.word	0x20001bd8
 8001204:	20001bdc 	.word	0x20001bdc
 8001208:	20001bd4 	.word	0x20001bd4
 800120c:	20001bd6 	.word	0x20001bd6

08001210 <cb_on_attribute_modified>:

/**
 * Callback function called when a characteristic attribute modify is requested, especially a write or notifiy request
 * @param handle handle to the request
 */
void cb_on_attribute_modified(uint16_t handle, uint8_t len, uint8_t data[]) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	603a      	str	r2, [r7, #0]
 800121a:	80fb      	strh	r3, [r7, #6]
 800121c:	460b      	mov	r3, r1
 800121e:	717b      	strb	r3, [r7, #5]

	// Iterate over all services and characteristics to find whose notify or write handle is requested
	for (uint8_t i = 0; i < local_service_callbacks_length; i++) {
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	e081      	b.n	800132a <cb_on_attribute_modified+0x11a>
		for (uint8_t j = 0;	j < sizeof(local_service_callbacks[i].characteristic_callbacks)	/ sizeof(characteristic_cb_handler_t); j++) {
 8001226:	2300      	movs	r3, #0
 8001228:	73bb      	strb	r3, [r7, #14]
 800122a:	e078      	b.n	800131e <cb_on_attribute_modified+0x10e>
			// If notification modified
			if (local_service_callbacks[i].characteristic_callbacks[j].characteristic_handler + 2 == handle) {
 800122c:	4b44      	ldr	r3, [pc, #272]	; (8001340 <cb_on_attribute_modified+0x130>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	21dc      	movs	r1, #220	; 0xdc
 8001234:	fb01 f303 	mul.w	r3, r1, r3
 8001238:	18d1      	adds	r1, r2, r3
 800123a:	7bba      	ldrb	r2, [r7, #14]
 800123c:	4613      	mov	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	3304      	adds	r3, #4
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	1c9a      	adds	r2, r3, #2
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	429a      	cmp	r2, r3
 8001250:	d125      	bne.n	800129e <cb_on_attribute_modified+0x8e>
				if (data[0] == 0x01) {
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d110      	bne.n	800127c <cb_on_attribute_modified+0x6c>
					local_service_callbacks[i].characteristic_callbacks[j].notification_enabled = 1;
 800125a:	4b39      	ldr	r3, [pc, #228]	; (8001340 <cb_on_attribute_modified+0x130>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	21dc      	movs	r1, #220	; 0xdc
 8001262:	fb01 f303 	mul.w	r3, r1, r3
 8001266:	18d1      	adds	r1, r2, r3
 8001268:	7bba      	ldrb	r2, [r7, #14]
 800126a:	4613      	mov	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	3320      	adds	r3, #32
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	e04d      	b.n	8001318 <cb_on_attribute_modified+0x108>
				} else {
					local_service_callbacks[i].characteristic_callbacks[j].notification_enabled = 0;
 800127c:	4b30      	ldr	r3, [pc, #192]	; (8001340 <cb_on_attribute_modified+0x130>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	21dc      	movs	r1, #220	; 0xdc
 8001284:	fb01 f303 	mul.w	r3, r1, r3
 8001288:	18d1      	adds	r1, r2, r3
 800128a:	7bba      	ldrb	r2, [r7, #14]
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	3320      	adds	r3, #32
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	e03c      	b.n	8001318 <cb_on_attribute_modified+0x108>
				}
			}
			// Else if write request
			else if (local_service_callbacks[i].characteristic_callbacks[j].characteristic_handler + 1 == handle) {
 800129e:	4b28      	ldr	r3, [pc, #160]	; (8001340 <cb_on_attribute_modified+0x130>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	21dc      	movs	r1, #220	; 0xdc
 80012a6:	fb01 f303 	mul.w	r3, r1, r3
 80012aa:	18d1      	adds	r1, r2, r3
 80012ac:	7bba      	ldrb	r2, [r7, #14]
 80012ae:	4613      	mov	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	440b      	add	r3, r1
 80012b8:	3304      	adds	r3, #4
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d129      	bne.n	8001318 <cb_on_attribute_modified+0x108>
				if (local_service_callbacks[i].characteristic_callbacks[j].write != NULL)
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <cb_on_attribute_modified+0x130>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	21dc      	movs	r1, #220	; 0xdc
 80012cc:	fb01 f303 	mul.w	r3, r1, r3
 80012d0:	18d1      	adds	r1, r2, r3
 80012d2:	7bba      	ldrb	r2, [r7, #14]
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	3314      	adds	r3, #20
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d018      	beq.n	8001318 <cb_on_attribute_modified+0x108>
					local_service_callbacks[i].characteristic_callbacks[j].write(&local_service_callbacks[i], len, data);
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <cb_on_attribute_modified+0x130>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	21dc      	movs	r1, #220	; 0xdc
 80012ee:	fb01 f303 	mul.w	r3, r1, r3
 80012f2:	18d1      	adds	r1, r2, r3
 80012f4:	7bba      	ldrb	r2, [r7, #14]
 80012f6:	4613      	mov	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4413      	add	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	440b      	add	r3, r1
 8001300:	3314      	adds	r3, #20
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <cb_on_attribute_modified+0x130>)
 8001306:	6811      	ldr	r1, [r2, #0]
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	20dc      	movs	r0, #220	; 0xdc
 800130c:	fb00 f202 	mul.w	r2, r0, r2
 8001310:	1888      	adds	r0, r1, r2
 8001312:	7979      	ldrb	r1, [r7, #5]
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	4798      	blx	r3
		for (uint8_t j = 0;	j < sizeof(local_service_callbacks[i].characteristic_callbacks)	/ sizeof(characteristic_cb_handler_t); j++) {
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	3301      	adds	r3, #1
 800131c:	73bb      	strb	r3, [r7, #14]
 800131e:	7bbb      	ldrb	r3, [r7, #14]
 8001320:	2b05      	cmp	r3, #5
 8001322:	d983      	bls.n	800122c <cb_on_attribute_modified+0x1c>
	for (uint8_t i = 0; i < local_service_callbacks_length; i++) {
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	3301      	adds	r3, #1
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <cb_on_attribute_modified+0x134>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	429a      	cmp	r2, r3
 8001332:	f4ff af78 	bcc.w	8001226 <cb_on_attribute_modified+0x16>
			}
		}
	}
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20001bd8 	.word	0x20001bd8
 8001344:	20001bdc 	.word	0x20001bdc

08001348 <send_notification>:

/**
 * Function polled by the MX_BlueNRG_MS_Process function, sends all notifications which are pending
 */
void send_notification(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0

	// Iterate over all services and characteristics to find ones with a pending notification
	for (uint8_t i = 0; i < local_service_callbacks_length; i++) {
 800134e:	2300      	movs	r3, #0
 8001350:	71fb      	strb	r3, [r7, #7]
 8001352:	e068      	b.n	8001426 <send_notification+0xde>
		for (uint8_t j = 0; j < sizeof(local_service_callbacks[i].characteristic_callbacks) / sizeof(characteristic_cb_handler_t); j++) {
 8001354:	2300      	movs	r3, #0
 8001356:	71bb      	strb	r3, [r7, #6]
 8001358:	e05f      	b.n	800141a <send_notification+0xd2>
			if (local_service_callbacks[i].characteristic_callbacks[j].notification_enabled	&&
 800135a:	4b38      	ldr	r3, [pc, #224]	; (800143c <send_notification+0xf4>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	21dc      	movs	r1, #220	; 0xdc
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	18d1      	adds	r1, r2, r3
 8001368:	79ba      	ldrb	r2, [r7, #6]
 800136a:	4613      	mov	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	3320      	adds	r3, #32
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d04b      	beq.n	8001414 <send_notification+0xcc>
					*(local_service_callbacks[i].characteristic_callbacks[j].notification_pending) &&
 800137c:	4b2f      	ldr	r3, [pc, #188]	; (800143c <send_notification+0xf4>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	21dc      	movs	r1, #220	; 0xdc
 8001384:	fb01 f303 	mul.w	r3, r1, r3
 8001388:	18d1      	adds	r1, r2, r3
 800138a:	79ba      	ldrb	r2, [r7, #6]
 800138c:	4613      	mov	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	3324      	adds	r3, #36	; 0x24
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	781b      	ldrb	r3, [r3, #0]
			if (local_service_callbacks[i].characteristic_callbacks[j].notification_enabled	&&
 800139c:	2b00      	cmp	r3, #0
 800139e:	d039      	beq.n	8001414 <send_notification+0xcc>
					local_service_callbacks[i].characteristic_callbacks[j].notify != NULL) {
 80013a0:	4b26      	ldr	r3, [pc, #152]	; (800143c <send_notification+0xf4>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	21dc      	movs	r1, #220	; 0xdc
 80013a8:	fb01 f303 	mul.w	r3, r1, r3
 80013ac:	18d1      	adds	r1, r2, r3
 80013ae:	79ba      	ldrb	r2, [r7, #6]
 80013b0:	4613      	mov	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	331c      	adds	r3, #28
 80013bc:	681b      	ldr	r3, [r3, #0]
					*(local_service_callbacks[i].characteristic_callbacks[j].notification_pending) &&
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d028      	beq.n	8001414 <send_notification+0xcc>

				local_service_callbacks[i].characteristic_callbacks[j].notify(&local_service_callbacks[i]);
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <send_notification+0xf4>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	21dc      	movs	r1, #220	; 0xdc
 80013ca:	fb01 f303 	mul.w	r3, r1, r3
 80013ce:	18d1      	adds	r1, r2, r3
 80013d0:	79ba      	ldrb	r2, [r7, #6]
 80013d2:	4613      	mov	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	331c      	adds	r3, #28
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a16      	ldr	r2, [pc, #88]	; (800143c <send_notification+0xf4>)
 80013e2:	6811      	ldr	r1, [r2, #0]
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	20dc      	movs	r0, #220	; 0xdc
 80013e8:	fb00 f202 	mul.w	r2, r0, r2
 80013ec:	440a      	add	r2, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4798      	blx	r3

				*(local_service_callbacks[i].characteristic_callbacks[j].notification_pending) = 0;
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <send_notification+0xf4>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	21dc      	movs	r1, #220	; 0xdc
 80013fa:	fb01 f303 	mul.w	r3, r1, r3
 80013fe:	18d1      	adds	r1, r2, r3
 8001400:	79ba      	ldrb	r2, [r7, #6]
 8001402:	4613      	mov	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	4413      	add	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	3324      	adds	r3, #36	; 0x24
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < sizeof(local_service_callbacks[i].characteristic_callbacks) / sizeof(characteristic_cb_handler_t); j++) {
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	3301      	adds	r3, #1
 8001418:	71bb      	strb	r3, [r7, #6]
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	2b05      	cmp	r3, #5
 800141e:	d99c      	bls.n	800135a <send_notification+0x12>
	for (uint8_t i = 0; i < local_service_callbacks_length; i++) {
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	3301      	adds	r3, #1
 8001424:	71fb      	strb	r3, [r7, #7]
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <send_notification+0xf8>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	79fa      	ldrb	r2, [r7, #7]
 800142c:	429a      	cmp	r2, r3
 800142e:	d391      	bcc.n	8001354 <send_notification+0xc>
			}
		}
	}
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20001bd8 	.word	0x20001bd8
 8001440:	20001bdc 	.word	0x20001bdc

08001444 <add_services>:

/**
 * Initialization functions for the different services
 * @return tBleStatus, indicating an error. BLE_STATUS_SUCCESS on success.
 */
tBleStatus add_services(void) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
	tBleStatus ret_val = BLE_STATUS_SUCCESS;
 800144a:	2300      	movs	r3, #0
 800144c:	71fb      	strb	r3, [r7, #7]

	// Add the Environmental Service to the GATT server, store its callback in the array
	ret_val = add_counter_service(&service_callbacks[0]);
 800144e:	4809      	ldr	r0, [pc, #36]	; (8001474 <add_services+0x30>)
 8001450:	f7ff fc14 	bl	8000c7c <add_counter_service>
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
	if (ret_val != BLE_STATUS_SUCCESS)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <add_services+0x1e>
		return ret_val;
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	e004      	b.n	800146c <add_services+0x28>

	// Provide informations about the service callbacks to the callbacks handler
	set_cb_functions(service_callbacks,	sizeof(service_callbacks) / sizeof(service_cb_handler_t));
 8001462:	2101      	movs	r1, #1
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <add_services+0x30>)
 8001466:	f7ff fdef 	bl	8001048 <set_cb_functions>

	return ret_val;
 800146a:	79fb      	ldrb	r3, [r7, #7]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20001f28 	.word	0x20001f28

08001478 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001482:	2003      	movs	r0, #3
 8001484:	f000 f960 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001488:	2000      	movs	r0, #0
 800148a:	f000 f80d 	bl	80014a8 <HAL_InitTick>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	71fb      	strb	r3, [r7, #7]
 8001498:	e001      	b.n	800149e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800149a:	f7ff fa57 	bl	800094c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800149e:	79fb      	ldrb	r3, [r7, #7]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_InitTick+0x6c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d023      	beq.n	8001504 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_InitTick+0x70>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <HAL_InitTick+0x6c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 f96d 	bl	80017b2 <HAL_SYSTICK_Config>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10f      	bne.n	80014fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b0f      	cmp	r3, #15
 80014e2:	d809      	bhi.n	80014f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e4:	2200      	movs	r2, #0
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f000 f937 	bl	800175e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014f0:	4a0a      	ldr	r2, [pc, #40]	; (800151c <HAL_InitTick+0x74>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e007      	b.n	8001508 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e004      	b.n	8001508 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	73fb      	strb	r3, [r7, #15]
 8001502:	e001      	b.n	8001508 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000010 	.word	0x20000010
 8001518:	20000000 	.word	0x20000000
 800151c:	2000000c 	.word	0x2000000c

08001520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000010 	.word	0x20000010
 8001544:	20002004 	.word	0x20002004

08001548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20002004 	.word	0x20002004

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff ffee 	bl	8001548 <HAL_GetTick>
 800156c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d005      	beq.n	8001586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_Delay+0x44>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001586:	bf00      	nop
 8001588:	f7ff ffde 	bl	8001548 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8f7      	bhi.n	8001588 <HAL_Delay+0x28>
  {
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000010 	.word	0x20000010

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	db0b      	blt.n	8001636 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4907      	ldr	r1, [pc, #28]	; (8001644 <__NVIC_EnableIRQ+0x38>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2001      	movs	r0, #1
 800162e:	fa00 f202 	lsl.w	r2, r0, r2
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e100 	.word	0xe000e100

08001648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	db0a      	blt.n	8001672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	490c      	ldr	r1, [pc, #48]	; (8001694 <__NVIC_SetPriority+0x4c>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	0112      	lsls	r2, r2, #4
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	440b      	add	r3, r1
 800166c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001670:	e00a      	b.n	8001688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4908      	ldr	r1, [pc, #32]	; (8001698 <__NVIC_SetPriority+0x50>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	3b04      	subs	r3, #4
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	440b      	add	r3, r1
 8001686:	761a      	strb	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000e100 	.word	0xe000e100
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f1c3 0307 	rsb	r3, r3, #7
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	bf28      	it	cs
 80016ba:	2304      	movcs	r3, #4
 80016bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3304      	adds	r3, #4
 80016c2:	2b06      	cmp	r3, #6
 80016c4:	d902      	bls.n	80016cc <NVIC_EncodePriority+0x30>
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3b03      	subs	r3, #3
 80016ca:	e000      	b.n	80016ce <NVIC_EncodePriority+0x32>
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	4313      	orrs	r3, r2
         );
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3724      	adds	r7, #36	; 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001714:	d301      	bcc.n	800171a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001716:	2301      	movs	r3, #1
 8001718:	e00f      	b.n	800173a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <SysTick_Config+0x40>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001722:	210f      	movs	r1, #15
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f7ff ff8e 	bl	8001648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <SysTick_Config+0x40>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <SysTick_Config+0x40>)
 8001734:	2207      	movs	r2, #7
 8001736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	e000e010 	.word	0xe000e010

08001748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff29 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001770:	f7ff ff3e 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 8001774:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	6978      	ldr	r0, [r7, #20]
 800177c:	f7ff ff8e 	bl	800169c <NVIC_EncodePriority>
 8001780:	4602      	mov	r2, r0
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff5d 	bl	8001648 <__NVIC_SetPriority>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff31 	bl	800160c <__NVIC_EnableIRQ>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ffa2 	bl	8001704 <SysTick_Config>
 80017c0:	4603      	mov	r3, r0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80017ca:	b480      	push	{r7}
 80017cc:	b087      	sub	sp, #28
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	460b      	mov	r3, r1
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80017dc:	7afb      	ldrb	r3, [r7, #11]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d103      	bne.n	80017ea <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	605a      	str	r2, [r3, #4]
      break;
 80017e8:	e002      	b.n	80017f0 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	75fb      	strb	r3, [r7, #23]
      break;
 80017ee:	bf00      	nop
  }

  return status;
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e003      	b.n	800181a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001818:	2300      	movs	r3, #0
  }
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	2201      	movs	r2, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	015a      	lsls	r2, r3, #5
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_EXTI_IRQHandler+0x5c>)
 8001852:	4413      	add	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4798      	blx	r3
    }
  }
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40010414 	.word	0x40010414

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001896:	e17f      	b.n	8001b98 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	2101      	movs	r1, #1
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8171 	beq.w	8001b92 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d00b      	beq.n	80018d0 <HAL_GPIO_Init+0x48>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d007      	beq.n	80018d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018c4:	2b11      	cmp	r3, #17
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b12      	cmp	r3, #18
 80018ce:	d130      	bne.n	8001932 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001906:	2201      	movs	r2, #1
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	f003 0201 	and.w	r2, r3, #1
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b03      	cmp	r3, #3
 800193c:	d118      	bne.n	8001970 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001944:	2201      	movs	r2, #1
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	08db      	lsrs	r3, r3, #3
 800195a:	f003 0201 	and.w	r2, r3, #1
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x128>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b12      	cmp	r3, #18
 80019ae:	d123      	bne.n	80019f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	08da      	lsrs	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3208      	adds	r2, #8
 80019b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	220f      	movs	r2, #15
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	08da      	lsrs	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3208      	adds	r2, #8
 80019f2:	6939      	ldr	r1, [r7, #16]
 80019f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0203 	and.w	r2, r3, #3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80ac 	beq.w	8001b92 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3a:	4b5f      	ldr	r3, [pc, #380]	; (8001bb8 <HAL_GPIO_Init+0x330>)
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3e:	4a5e      	ldr	r2, [pc, #376]	; (8001bb8 <HAL_GPIO_Init+0x330>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6613      	str	r3, [r2, #96]	; 0x60
 8001a46:	4b5c      	ldr	r3, [pc, #368]	; (8001bb8 <HAL_GPIO_Init+0x330>)
 8001a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a52:	4a5a      	ldr	r2, [pc, #360]	; (8001bbc <HAL_GPIO_Init+0x334>)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a7c:	d025      	beq.n	8001aca <HAL_GPIO_Init+0x242>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4f      	ldr	r2, [pc, #316]	; (8001bc0 <HAL_GPIO_Init+0x338>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d01f      	beq.n	8001ac6 <HAL_GPIO_Init+0x23e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a4e      	ldr	r2, [pc, #312]	; (8001bc4 <HAL_GPIO_Init+0x33c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d019      	beq.n	8001ac2 <HAL_GPIO_Init+0x23a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4d      	ldr	r2, [pc, #308]	; (8001bc8 <HAL_GPIO_Init+0x340>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d013      	beq.n	8001abe <HAL_GPIO_Init+0x236>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4c      	ldr	r2, [pc, #304]	; (8001bcc <HAL_GPIO_Init+0x344>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00d      	beq.n	8001aba <HAL_GPIO_Init+0x232>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4b      	ldr	r2, [pc, #300]	; (8001bd0 <HAL_GPIO_Init+0x348>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d007      	beq.n	8001ab6 <HAL_GPIO_Init+0x22e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4a      	ldr	r2, [pc, #296]	; (8001bd4 <HAL_GPIO_Init+0x34c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d101      	bne.n	8001ab2 <HAL_GPIO_Init+0x22a>
 8001aae:	2306      	movs	r3, #6
 8001ab0:	e00c      	b.n	8001acc <HAL_GPIO_Init+0x244>
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	e00a      	b.n	8001acc <HAL_GPIO_Init+0x244>
 8001ab6:	2305      	movs	r3, #5
 8001ab8:	e008      	b.n	8001acc <HAL_GPIO_Init+0x244>
 8001aba:	2304      	movs	r3, #4
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x244>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e004      	b.n	8001acc <HAL_GPIO_Init+0x244>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_Init+0x244>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_Init+0x244>
 8001aca:	2300      	movs	r3, #0
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	f002 0203 	and.w	r2, r2, #3
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	4093      	lsls	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001adc:	4937      	ldr	r1, [pc, #220]	; (8001bbc <HAL_GPIO_Init+0x334>)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001aea:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <HAL_GPIO_Init+0x350>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b0e:	4a32      	ldr	r2, [pc, #200]	; (8001bd8 <HAL_GPIO_Init+0x350>)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b14:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <HAL_GPIO_Init+0x350>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b38:	4a27      	ldr	r2, [pc, #156]	; (8001bd8 <HAL_GPIO_Init+0x350>)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b3e:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <HAL_GPIO_Init+0x350>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b62:	4a1d      	ldr	r2, [pc, #116]	; (8001bd8 <HAL_GPIO_Init+0x350>)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <HAL_GPIO_Init+0x350>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b8c:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <HAL_GPIO_Init+0x350>)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f47f ae78 	bne.w	8001898 <HAL_GPIO_Init+0x10>
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	371c      	adds	r7, #28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010000 	.word	0x40010000
 8001bc0:	48000400 	.word	0x48000400
 8001bc4:	48000800 	.word	0x48000800
 8001bc8:	48000c00 	.word	0x48000c00
 8001bcc:	48001000 	.word	0x48001000
 8001bd0:	48001400 	.word	0x48001400
 8001bd4:	48001800 	.word	0x48001800
 8001bd8:	40010400 	.word	0x40010400

08001bdc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b087      	sub	sp, #28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001bea:	e0cd      	b.n	8001d88 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001bec:	2201      	movs	r2, #1
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80c0 	beq.w	8001d82 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001c02:	4a68      	ldr	r2, [pc, #416]	; (8001da4 <HAL_GPIO_DeInit+0x1c8>)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3302      	adds	r3, #2
 8001c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	220f      	movs	r2, #15
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4013      	ands	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c2a:	d025      	beq.n	8001c78 <HAL_GPIO_DeInit+0x9c>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a5e      	ldr	r2, [pc, #376]	; (8001da8 <HAL_GPIO_DeInit+0x1cc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d01f      	beq.n	8001c74 <HAL_GPIO_DeInit+0x98>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a5d      	ldr	r2, [pc, #372]	; (8001dac <HAL_GPIO_DeInit+0x1d0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d019      	beq.n	8001c70 <HAL_GPIO_DeInit+0x94>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a5c      	ldr	r2, [pc, #368]	; (8001db0 <HAL_GPIO_DeInit+0x1d4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d013      	beq.n	8001c6c <HAL_GPIO_DeInit+0x90>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a5b      	ldr	r2, [pc, #364]	; (8001db4 <HAL_GPIO_DeInit+0x1d8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00d      	beq.n	8001c68 <HAL_GPIO_DeInit+0x8c>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a5a      	ldr	r2, [pc, #360]	; (8001db8 <HAL_GPIO_DeInit+0x1dc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d007      	beq.n	8001c64 <HAL_GPIO_DeInit+0x88>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a59      	ldr	r2, [pc, #356]	; (8001dbc <HAL_GPIO_DeInit+0x1e0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <HAL_GPIO_DeInit+0x84>
 8001c5c:	2306      	movs	r3, #6
 8001c5e:	e00c      	b.n	8001c7a <HAL_GPIO_DeInit+0x9e>
 8001c60:	2307      	movs	r3, #7
 8001c62:	e00a      	b.n	8001c7a <HAL_GPIO_DeInit+0x9e>
 8001c64:	2305      	movs	r3, #5
 8001c66:	e008      	b.n	8001c7a <HAL_GPIO_DeInit+0x9e>
 8001c68:	2304      	movs	r3, #4
 8001c6a:	e006      	b.n	8001c7a <HAL_GPIO_DeInit+0x9e>
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e004      	b.n	8001c7a <HAL_GPIO_DeInit+0x9e>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e002      	b.n	8001c7a <HAL_GPIO_DeInit+0x9e>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <HAL_GPIO_DeInit+0x9e>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	f002 0203 	and.w	r2, r2, #3
 8001c80:	0092      	lsls	r2, r2, #2
 8001c82:	4093      	lsls	r3, r2
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d132      	bne.n	8001cf0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001c8a:	4b4d      	ldr	r3, [pc, #308]	; (8001dc0 <HAL_GPIO_DeInit+0x1e4>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	494b      	ldr	r1, [pc, #300]	; (8001dc0 <HAL_GPIO_DeInit+0x1e4>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001c98:	4b49      	ldr	r3, [pc, #292]	; (8001dc0 <HAL_GPIO_DeInit+0x1e4>)
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	4947      	ldr	r1, [pc, #284]	; (8001dc0 <HAL_GPIO_DeInit+0x1e4>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001ca6:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_GPIO_DeInit+0x1e4>)
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	4944      	ldr	r1, [pc, #272]	; (8001dc0 <HAL_GPIO_DeInit+0x1e4>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001cb4:	4b42      	ldr	r3, [pc, #264]	; (8001dc0 <HAL_GPIO_DeInit+0x1e4>)
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	4940      	ldr	r1, [pc, #256]	; (8001dc0 <HAL_GPIO_DeInit+0x1e4>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	220f      	movs	r2, #15
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001cd2:	4a34      	ldr	r2, [pc, #208]	; (8001da4 <HAL_GPIO_DeInit+0x1c8>)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	3302      	adds	r3, #2
 8001cda:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	4830      	ldr	r0, [pc, #192]	; (8001da4 <HAL_GPIO_DeInit+0x1c8>)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	400a      	ands	r2, r1
 8001cea:	3302      	adds	r3, #2
 8001cec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2103      	movs	r1, #3
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	08da      	lsrs	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3208      	adds	r2, #8
 8001d0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	08d2      	lsrs	r2, r2, #3
 8001d24:	4019      	ands	r1, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3208      	adds	r2, #8
 8001d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2103      	movs	r1, #3
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	401a      	ands	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	2101      	movs	r1, #1
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	401a      	ands	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2103      	movs	r1, #3
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	401a      	ands	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d72:	2101      	movs	r1, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3301      	adds	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f47f af2b 	bne.w	8001bec <HAL_GPIO_DeInit+0x10>
  }
}
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
 8001d9a:	371c      	adds	r7, #28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	40010000 	.word	0x40010000
 8001da8:	48000400 	.word	0x48000400
 8001dac:	48000800 	.word	0x48000800
 8001db0:	48000c00 	.word	0x48000c00
 8001db4:	48001000 	.word	0x48001000
 8001db8:	48001400 	.word	0x48001400
 8001dbc:	48001800 	.word	0x48001800
 8001dc0:	40010400 	.word	0x40010400

08001dc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	887b      	ldrh	r3, [r7, #2]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e001      	b.n	8001de6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
 8001e00:	4613      	mov	r3, r2
 8001e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e04:	787b      	ldrb	r3, [r7, #1]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e10:	e002      	b.n	8001e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40007000 	.word	0x40007000

08001e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e4e:	d130      	bne.n	8001eb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e50:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e5c:	d038      	beq.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e66:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2232      	movs	r2, #50	; 0x32
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0c9b      	lsrs	r3, r3, #18
 8001e80:	3301      	adds	r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e84:	e002      	b.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e98:	d102      	bne.n	8001ea0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f2      	bne.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eac:	d110      	bne.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e00f      	b.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ebe:	d007      	beq.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ec8:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ece:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	431bde83 	.word	0x431bde83

08001eec <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001efa:	6053      	str	r3, [r2, #4]
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40007000 	.word	0x40007000

08001f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e3d4      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1e:	4ba1      	ldr	r3, [pc, #644]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f28:	4b9e      	ldr	r3, [pc, #632]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80e4 	beq.w	8002108 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_RCC_OscConfig+0x4a>
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b0c      	cmp	r3, #12
 8001f4a:	f040 808b 	bne.w	8002064 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	f040 8087 	bne.w	8002064 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f56:	4b93      	ldr	r3, [pc, #588]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x62>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e3ac      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1a      	ldr	r2, [r3, #32]
 8001f72:	4b8c      	ldr	r3, [pc, #560]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <HAL_RCC_OscConfig+0x7c>
 8001f7e:	4b89      	ldr	r3, [pc, #548]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f86:	e005      	b.n	8001f94 <HAL_RCC_OscConfig+0x88>
 8001f88:	4b86      	ldr	r3, [pc, #536]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d223      	bcs.n	8001fe0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fd09 	bl	80029b4 <RCC_SetFlashLatencyFromMSIRange>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e38d      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fac:	4b7d      	ldr	r3, [pc, #500]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a7c      	ldr	r2, [pc, #496]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b7a      	ldr	r3, [pc, #488]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4977      	ldr	r1, [pc, #476]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fca:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	4972      	ldr	r1, [pc, #456]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
 8001fde:	e025      	b.n	800202c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fe0:	4b70      	ldr	r3, [pc, #448]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a6f      	ldr	r2, [pc, #444]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fe6:	f043 0308 	orr.w	r3, r3, #8
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	4b6d      	ldr	r3, [pc, #436]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	496a      	ldr	r1, [pc, #424]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ffe:	4b69      	ldr	r3, [pc, #420]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	4965      	ldr	r1, [pc, #404]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fcc9 	bl	80029b4 <RCC_SetFlashLatencyFromMSIRange>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e34d      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800202c:	f000 fc36 	bl	800289c <HAL_RCC_GetSysClockFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b5c      	ldr	r3, [pc, #368]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	495a      	ldr	r1, [pc, #360]	; (80021a8 <HAL_RCC_OscConfig+0x29c>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
 8002048:	4a58      	ldr	r2, [pc, #352]	; (80021ac <HAL_RCC_OscConfig+0x2a0>)
 800204a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800204c:	4b58      	ldr	r3, [pc, #352]	; (80021b0 <HAL_RCC_OscConfig+0x2a4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fa29 	bl	80014a8 <HAL_InitTick>
 8002056:	4603      	mov	r3, r0
 8002058:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d052      	beq.n	8002106 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	e331      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d032      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800206c:	4b4d      	ldr	r3, [pc, #308]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a4c      	ldr	r2, [pc, #304]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002078:	f7ff fa66 	bl	8001548 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002080:	f7ff fa62 	bl	8001548 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e31a      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002092:	4b44      	ldr	r3, [pc, #272]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800209e:	4b41      	ldr	r3, [pc, #260]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a40      	ldr	r2, [pc, #256]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020a4:	f043 0308 	orr.w	r3, r3, #8
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	493b      	ldr	r1, [pc, #236]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020bc:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	4936      	ldr	r1, [pc, #216]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
 80020d0:	e01a      	b.n	8002108 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020d2:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a33      	ldr	r2, [pc, #204]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020de:	f7ff fa33 	bl	8001548 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020e6:	f7ff fa2f 	bl	8001548 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e2e7      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020f8:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f0      	bne.n	80020e6 <HAL_RCC_OscConfig+0x1da>
 8002104:	e000      	b.n	8002108 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002106:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d074      	beq.n	80021fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2b08      	cmp	r3, #8
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x21a>
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2b0c      	cmp	r3, #12
 800211e:	d10e      	bne.n	800213e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d10b      	bne.n	800213e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002126:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d064      	beq.n	80021fc <HAL_RCC_OscConfig+0x2f0>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d160      	bne.n	80021fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e2c4      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002146:	d106      	bne.n	8002156 <HAL_RCC_OscConfig+0x24a>
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a15      	ldr	r2, [pc, #84]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 800214e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	e01d      	b.n	8002192 <HAL_RCC_OscConfig+0x286>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800215e:	d10c      	bne.n	800217a <HAL_RCC_OscConfig+0x26e>
 8002160:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0f      	ldr	r2, [pc, #60]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	e00b      	b.n	8002192 <HAL_RCC_OscConfig+0x286>
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a06      	ldr	r2, [pc, #24]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 800218c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002190:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01c      	beq.n	80021d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7ff f9d5 	bl	8001548 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a0:	e011      	b.n	80021c6 <HAL_RCC_OscConfig+0x2ba>
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08004364 	.word	0x08004364
 80021ac:	20000000 	.word	0x20000000
 80021b0:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff f9c8 	bl	8001548 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e280      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c6:	4baf      	ldr	r3, [pc, #700]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x2a8>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7ff f9b8 	bl	8001548 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff f9b4 	bl	8001548 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e26c      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ee:	4ba5      	ldr	r3, [pc, #660]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x2d0>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d060      	beq.n	80022cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d005      	beq.n	800221c <HAL_RCC_OscConfig+0x310>
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	2b0c      	cmp	r3, #12
 8002214:	d119      	bne.n	800224a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d116      	bne.n	800224a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221c:	4b99      	ldr	r3, [pc, #612]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_OscConfig+0x328>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e249      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002234:	4b93      	ldr	r3, [pc, #588]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	061b      	lsls	r3, r3, #24
 8002242:	4990      	ldr	r1, [pc, #576]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002248:	e040      	b.n	80022cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d023      	beq.n	800229a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002252:	4b8c      	ldr	r3, [pc, #560]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a8b      	ldr	r2, [pc, #556]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7ff f973 	bl	8001548 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002266:	f7ff f96f 	bl	8001548 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e227      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002278:	4b82      	ldr	r3, [pc, #520]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4b7f      	ldr	r3, [pc, #508]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	497c      	ldr	r1, [pc, #496]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
 8002298:	e018      	b.n	80022cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229a:	4b7a      	ldr	r3, [pc, #488]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a79      	ldr	r2, [pc, #484]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80022a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7ff f94f 	bl	8001548 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ae:	f7ff f94b 	bl	8001548 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e203      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c0:	4b70      	ldr	r3, [pc, #448]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f0      	bne.n	80022ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d03c      	beq.n	8002352 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01c      	beq.n	800231a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e0:	4b68      	ldr	r3, [pc, #416]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80022e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e6:	4a67      	ldr	r2, [pc, #412]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7ff f92a 	bl	8001548 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f8:	f7ff f926 	bl	8001548 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e1de      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800230a:	4b5e      	ldr	r3, [pc, #376]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 800230c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ef      	beq.n	80022f8 <HAL_RCC_OscConfig+0x3ec>
 8002318:	e01b      	b.n	8002352 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231a:	4b5a      	ldr	r3, [pc, #360]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 800231c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002320:	4a58      	ldr	r2, [pc, #352]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232a:	f7ff f90d 	bl	8001548 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002332:	f7ff f909 	bl	8001548 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e1c1      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002344:	4b4f      	ldr	r3, [pc, #316]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1ef      	bne.n	8002332 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80a6 	beq.w	80024ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002360:	2300      	movs	r3, #0
 8002362:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002364:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10d      	bne.n	800238c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002370:	4b44      	ldr	r3, [pc, #272]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	4a43      	ldr	r2, [pc, #268]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237a:	6593      	str	r3, [r2, #88]	; 0x58
 800237c:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002388:	2301      	movs	r3, #1
 800238a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238c:	4b3e      	ldr	r3, [pc, #248]	; (8002488 <HAL_RCC_OscConfig+0x57c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d118      	bne.n	80023ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002398:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <HAL_RCC_OscConfig+0x57c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a3a      	ldr	r2, [pc, #232]	; (8002488 <HAL_RCC_OscConfig+0x57c>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a4:	f7ff f8d0 	bl	8001548 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ac:	f7ff f8cc 	bl	8001548 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e184      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023be:	4b32      	ldr	r3, [pc, #200]	; (8002488 <HAL_RCC_OscConfig+0x57c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d108      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4d8>
 80023d2:	4b2c      	ldr	r3, [pc, #176]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	4a2a      	ldr	r2, [pc, #168]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e2:	e024      	b.n	800242e <HAL_RCC_OscConfig+0x522>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d110      	bne.n	800240e <HAL_RCC_OscConfig+0x502>
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	4a24      	ldr	r2, [pc, #144]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023fc:	4b21      	ldr	r3, [pc, #132]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002402:	4a20      	ldr	r2, [pc, #128]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800240c:	e00f      	b.n	800242e <HAL_RCC_OscConfig+0x522>
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002414:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800241e:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002424:	4a17      	ldr	r2, [pc, #92]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002426:	f023 0304 	bic.w	r3, r3, #4
 800242a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d016      	beq.n	8002464 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002436:	f7ff f887 	bl	8001548 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7ff f883 	bl	8001548 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	; 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e139      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0ed      	beq.n	800243e <HAL_RCC_OscConfig+0x532>
 8002462:	e01a      	b.n	800249a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7ff f870 	bl	8001548 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800246a:	e00f      	b.n	800248c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7ff f86c 	bl	8001548 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d906      	bls.n	800248c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e122      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800248c:	4b90      	ldr	r3, [pc, #576]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1e8      	bne.n	800246c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800249a:	7ffb      	ldrb	r3, [r7, #31]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d105      	bne.n	80024ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a0:	4b8b      	ldr	r3, [pc, #556]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	4a8a      	ldr	r2, [pc, #552]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80024a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 8108 	beq.w	80026c6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	f040 80d0 	bne.w	8002660 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024c0:	4b83      	ldr	r3, [pc, #524]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f003 0203 	and.w	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d130      	bne.n	8002536 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	3b01      	subs	r3, #1
 80024e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d127      	bne.n	8002536 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d11f      	bne.n	8002536 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002500:	2a07      	cmp	r2, #7
 8002502:	bf14      	ite	ne
 8002504:	2201      	movne	r2, #1
 8002506:	2200      	moveq	r2, #0
 8002508:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800250a:	4293      	cmp	r3, r2
 800250c:	d113      	bne.n	8002536 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	3b01      	subs	r3, #1
 800251c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d109      	bne.n	8002536 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	085b      	lsrs	r3, r3, #1
 800252e:	3b01      	subs	r3, #1
 8002530:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d06e      	beq.n	8002614 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2b0c      	cmp	r3, #12
 800253a:	d069      	beq.n	8002610 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800253c:	4b64      	ldr	r3, [pc, #400]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002548:	4b61      	ldr	r3, [pc, #388]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0b7      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002558:	4b5d      	ldr	r3, [pc, #372]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a5c      	ldr	r2, [pc, #368]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800255e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002562:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002564:	f7fe fff0 	bl	8001548 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe ffec 	bl	8001548 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0a4      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257e:	4b54      	ldr	r3, [pc, #336]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258a:	4b51      	ldr	r3, [pc, #324]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	4b51      	ldr	r3, [pc, #324]	; (80026d4 <HAL_RCC_OscConfig+0x7c8>)
 8002590:	4013      	ands	r3, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800259a:	3a01      	subs	r2, #1
 800259c:	0112      	lsls	r2, r2, #4
 800259e:	4311      	orrs	r1, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025a4:	0212      	lsls	r2, r2, #8
 80025a6:	4311      	orrs	r1, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025ac:	0852      	lsrs	r2, r2, #1
 80025ae:	3a01      	subs	r2, #1
 80025b0:	0552      	lsls	r2, r2, #21
 80025b2:	4311      	orrs	r1, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025b8:	0852      	lsrs	r2, r2, #1
 80025ba:	3a01      	subs	r2, #1
 80025bc:	0652      	lsls	r2, r2, #25
 80025be:	4311      	orrs	r1, r2
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025c4:	0912      	lsrs	r2, r2, #4
 80025c6:	0452      	lsls	r2, r2, #17
 80025c8:	430a      	orrs	r2, r1
 80025ca:	4941      	ldr	r1, [pc, #260]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025d0:	4b3f      	ldr	r3, [pc, #252]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a3e      	ldr	r2, [pc, #248]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80025d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025dc:	4b3c      	ldr	r3, [pc, #240]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a3b      	ldr	r2, [pc, #236]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80025e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025e8:	f7fe ffae 	bl	8001548 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f0:	f7fe ffaa 	bl	8001548 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e062      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002602:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800260e:	e05a      	b.n	80026c6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e059      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002614:	4b2e      	ldr	r3, [pc, #184]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d152      	bne.n	80026c6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002620:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a2a      	ldr	r2, [pc, #168]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800262c:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a27      	ldr	r2, [pc, #156]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002636:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002638:	f7fe ff86 	bl	8001548 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002640:	f7fe ff82 	bl	8001548 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e03a      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002652:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x734>
 800265e:	e032      	b.n	80026c6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d02d      	beq.n	80026c2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a19      	ldr	r2, [pc, #100]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800266c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002670:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d105      	bne.n	800268a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	4a13      	ldr	r2, [pc, #76]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002684:	f023 0303 	bic.w	r3, r3, #3
 8002688:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	4a10      	ldr	r2, [pc, #64]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002690:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002698:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7fe ff55 	bl	8001548 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a2:	f7fe ff51 	bl	8001548 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e009      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x796>
 80026c0:	e001      	b.n	80026c6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3720      	adds	r7, #32
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000
 80026d4:	f99d808c 	.word	0xf99d808c

080026d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0c8      	b.n	800287e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026ec:	4b66      	ldr	r3, [pc, #408]	; (8002888 <HAL_RCC_ClockConfig+0x1b0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d910      	bls.n	800271c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b63      	ldr	r3, [pc, #396]	; (8002888 <HAL_RCC_ClockConfig+0x1b0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 0207 	bic.w	r2, r3, #7
 8002702:	4961      	ldr	r1, [pc, #388]	; (8002888 <HAL_RCC_ClockConfig+0x1b0>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b5f      	ldr	r3, [pc, #380]	; (8002888 <HAL_RCC_ClockConfig+0x1b0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0b0      	b.n	800287e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d04c      	beq.n	80027c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d107      	bne.n	8002740 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002730:	4b56      	ldr	r3, [pc, #344]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d121      	bne.n	8002780 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e09e      	b.n	800287e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d107      	bne.n	8002758 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002748:	4b50      	ldr	r3, [pc, #320]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d115      	bne.n	8002780 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e092      	b.n	800287e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d107      	bne.n	8002770 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002760:	4b4a      	ldr	r3, [pc, #296]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d109      	bne.n	8002780 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e086      	b.n	800287e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002770:	4b46      	ldr	r3, [pc, #280]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e07e      	b.n	800287e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002780:	4b42      	ldr	r3, [pc, #264]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f023 0203 	bic.w	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	493f      	ldr	r1, [pc, #252]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002792:	f7fe fed9 	bl	8001548 <HAL_GetTick>
 8002796:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279a:	f7fe fed5 	bl	8001548 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e066      	b.n	800287e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b0:	4b36      	ldr	r3, [pc, #216]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 020c 	and.w	r2, r3, #12
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	429a      	cmp	r2, r3
 80027c0:	d1eb      	bne.n	800279a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ce:	4b2f      	ldr	r3, [pc, #188]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	492c      	ldr	r1, [pc, #176]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027e0:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_RCC_ClockConfig+0x1b0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d210      	bcs.n	8002810 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_RCC_ClockConfig+0x1b0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 0207 	bic.w	r2, r3, #7
 80027f6:	4924      	ldr	r1, [pc, #144]	; (8002888 <HAL_RCC_ClockConfig+0x1b0>)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_RCC_ClockConfig+0x1b0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e036      	b.n	800287e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4918      	ldr	r1, [pc, #96]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4910      	ldr	r1, [pc, #64]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800284e:	f000 f825 	bl	800289c <HAL_RCC_GetSysClockFreq>
 8002852:	4602      	mov	r2, r0
 8002854:	4b0d      	ldr	r3, [pc, #52]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	490c      	ldr	r1, [pc, #48]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002860:	5ccb      	ldrb	r3, [r1, r3]
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fe18 	bl	80014a8 <HAL_InitTick>
 8002878:	4603      	mov	r3, r0
 800287a:	72fb      	strb	r3, [r7, #11]

  return status;
 800287c:	7afb      	ldrb	r3, [r7, #11]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40022000 	.word	0x40022000
 800288c:	40021000 	.word	0x40021000
 8002890:	08004364 	.word	0x08004364
 8002894:	20000000 	.word	0x20000000
 8002898:	2000000c 	.word	0x2000000c

0800289c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028aa:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b4:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x34>
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d121      	bne.n	800290e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d11e      	bne.n	800290e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028d0:	4b34      	ldr	r3, [pc, #208]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028dc:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	e005      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028ec:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028f8:	4a2b      	ldr	r2, [pc, #172]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002900:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10d      	bne.n	8002924 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800290c:	e00a      	b.n	8002924 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b04      	cmp	r3, #4
 8002912:	d102      	bne.n	800291a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002914:	4b25      	ldr	r3, [pc, #148]	; (80029ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	e004      	b.n	8002924 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2b08      	cmp	r3, #8
 800291e:	d101      	bne.n	8002924 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002920:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002922:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d134      	bne.n	8002994 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800292a:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d003      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0xa6>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d003      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0xac>
 8002940:	e005      	b.n	800294e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002944:	617b      	str	r3, [r7, #20]
      break;
 8002946:	e005      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800294a:	617b      	str	r3, [r7, #20]
      break;
 800294c:	e002      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	617b      	str	r3, [r7, #20]
      break;
 8002952:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002954:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	3301      	adds	r3, #1
 8002960:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	fb02 f203 	mul.w	r2, r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	fbb2 f3f3 	udiv	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	0e5b      	lsrs	r3, r3, #25
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	3301      	adds	r3, #1
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002992:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002994:	69bb      	ldr	r3, [r7, #24]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	; 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
 80029a8:	08004374 	.word	0x08004374
 80029ac:	00f42400 	.word	0x00f42400
 80029b0:	007a1200 	.word	0x007a1200

080029b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029c0:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029cc:	f7ff fa2a 	bl	8001e24 <HAL_PWREx_GetVoltageRange>
 80029d0:	6178      	str	r0, [r7, #20]
 80029d2:	e014      	b.n	80029fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	4a24      	ldr	r2, [pc, #144]	; (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029de:	6593      	str	r3, [r2, #88]	; 0x58
 80029e0:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029ec:	f7ff fa1a 	bl	8001e24 <HAL_PWREx_GetVoltageRange>
 80029f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029f2:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a04:	d10b      	bne.n	8002a1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b80      	cmp	r3, #128	; 0x80
 8002a0a:	d919      	bls.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2ba0      	cmp	r3, #160	; 0xa0
 8002a10:	d902      	bls.n	8002a18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a12:	2302      	movs	r3, #2
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	e013      	b.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a18:	2301      	movs	r3, #1
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	e010      	b.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b80      	cmp	r3, #128	; 0x80
 8002a22:	d902      	bls.n	8002a2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a24:	2303      	movs	r3, #3
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	e00a      	b.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b80      	cmp	r3, #128	; 0x80
 8002a2e:	d102      	bne.n	8002a36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a30:	2302      	movs	r3, #2
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	e004      	b.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b70      	cmp	r3, #112	; 0x70
 8002a3a:	d101      	bne.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 0207 	bic.w	r2, r3, #7
 8002a48:	4909      	ldr	r1, [pc, #36]	; (8002a70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d001      	beq.n	8002a62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40022000 	.word	0x40022000

08002a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e095      	b.n	8002bb2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d108      	bne.n	8002aa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a96:	d009      	beq.n	8002aac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
 8002a9e:	e005      	b.n	8002aac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f877 	bl	8002bba <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002aec:	d902      	bls.n	8002af4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	e002      	b.n	8002afa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b02:	d007      	beq.n	8002b14 <HAL_SPI_Init+0xa0>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b0c:	d002      	beq.n	8002b14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	ea42 0103 	orr.w	r1, r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	0c1b      	lsrs	r3, r3, #16
 8002b70:	f003 0204 	and.w	r2, r3, #4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b90:	ea42 0103 	orr.w	r1, r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b08a      	sub	sp, #40	; 0x28
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_SPI_TransmitReceive+0x26>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e1fb      	b.n	8002fec <HAL_SPI_TransmitReceive+0x41e>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bfc:	f7fe fca4 	bl	8001548 <HAL_GetTick>
 8002c00:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c08:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002c10:	887b      	ldrh	r3, [r7, #2]
 8002c12:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002c14:	887b      	ldrh	r3, [r7, #2]
 8002c16:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c18:	7efb      	ldrb	r3, [r7, #27]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d00e      	beq.n	8002c3c <HAL_SPI_TransmitReceive+0x6e>
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c24:	d106      	bne.n	8002c34 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d102      	bne.n	8002c34 <HAL_SPI_TransmitReceive+0x66>
 8002c2e:	7efb      	ldrb	r3, [r7, #27]
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d003      	beq.n	8002c3c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
 8002c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c3a:	e1cd      	b.n	8002fd8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_SPI_TransmitReceive+0x80>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <HAL_SPI_TransmitReceive+0x80>
 8002c48:	887b      	ldrh	r3, [r7, #2]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d103      	bne.n	8002c56 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c54:	e1c0      	b.n	8002fd8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d003      	beq.n	8002c6a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2205      	movs	r2, #5
 8002c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	887a      	ldrh	r2, [r7, #2]
 8002c7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	887a      	ldrh	r2, [r7, #2]
 8002c82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	887a      	ldrh	r2, [r7, #2]
 8002c96:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cac:	d802      	bhi.n	8002cb4 <HAL_SPI_TransmitReceive+0xe6>
 8002cae:	8a3b      	ldrh	r3, [r7, #16]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d908      	bls.n	8002cc6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	e007      	b.n	8002cd6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cd4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d007      	beq.n	8002cf4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cfc:	d97c      	bls.n	8002df8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_SPI_TransmitReceive+0x13e>
 8002d06:	8a7b      	ldrh	r3, [r7, #18]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d169      	bne.n	8002de0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	881a      	ldrh	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	1c9a      	adds	r2, r3, #2
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d30:	e056      	b.n	8002de0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d11b      	bne.n	8002d78 <HAL_SPI_TransmitReceive+0x1aa>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d016      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x1aa>
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d113      	bne.n	8002d78 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	881a      	ldrh	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	1c9a      	adds	r2, r3, #2
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d11c      	bne.n	8002dc0 <HAL_SPI_TransmitReceive+0x1f2>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	b292      	uxth	r2, r2
 8002d9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	1c9a      	adds	r2, r3, #2
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002dc0:	f7fe fbc2 	bl	8001548 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d807      	bhi.n	8002de0 <HAL_SPI_TransmitReceive+0x212>
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d003      	beq.n	8002de0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002dde:	e0fb      	b.n	8002fd8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1a3      	bne.n	8002d32 <HAL_SPI_TransmitReceive+0x164>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d19d      	bne.n	8002d32 <HAL_SPI_TransmitReceive+0x164>
 8002df6:	e0df      	b.n	8002fb8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_SPI_TransmitReceive+0x23a>
 8002e00:	8a7b      	ldrh	r3, [r7, #18]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	f040 80cb 	bne.w	8002f9e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d912      	bls.n	8002e38 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	881a      	ldrh	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e22:	1c9a      	adds	r2, r3, #2
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b02      	subs	r3, #2
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e36:	e0b2      	b.n	8002f9e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330c      	adds	r3, #12
 8002e42:	7812      	ldrb	r2, [r2, #0]
 8002e44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e5e:	e09e      	b.n	8002f9e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d134      	bne.n	8002ed8 <HAL_SPI_TransmitReceive+0x30a>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d02f      	beq.n	8002ed8 <HAL_SPI_TransmitReceive+0x30a>
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d12c      	bne.n	8002ed8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d912      	bls.n	8002eae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	881a      	ldrh	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	1c9a      	adds	r2, r3, #2
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b02      	subs	r3, #2
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002eac:	e012      	b.n	8002ed4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	330c      	adds	r3, #12
 8002eb8:	7812      	ldrb	r2, [r2, #0]
 8002eba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d148      	bne.n	8002f78 <HAL_SPI_TransmitReceive+0x3aa>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d042      	beq.n	8002f78 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d923      	bls.n	8002f46 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	b292      	uxth	r2, r2
 8002f0a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	1c9a      	adds	r2, r3, #2
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b02      	subs	r3, #2
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d81f      	bhi.n	8002f74 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	e016      	b.n	8002f74 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f103 020c 	add.w	r2, r3, #12
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	7812      	ldrb	r2, [r2, #0]
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f74:	2301      	movs	r3, #1
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f78:	f7fe fae6 	bl	8001548 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d803      	bhi.n	8002f90 <HAL_SPI_TransmitReceive+0x3c2>
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d102      	bne.n	8002f96 <HAL_SPI_TransmitReceive+0x3c8>
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d103      	bne.n	8002f9e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f9c:	e01c      	b.n	8002fd8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f47f af5b 	bne.w	8002e60 <HAL_SPI_TransmitReceive+0x292>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f47f af54 	bne.w	8002e60 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f941 	bl	8003244 <SPI_EndRxTxTransaction>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d006      	beq.n	8002fd6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	661a      	str	r2, [r3, #96]	; 0x60
 8002fd4:	e000      	b.n	8002fd8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002fd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fe8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3728      	adds	r7, #40	; 0x28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003002:	b2db      	uxtb	r3, r3
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003020:	f7fe fa92 	bl	8001548 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	4413      	add	r3, r2
 800302e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003030:	f7fe fa8a 	bl	8001548 <HAL_GetTick>
 8003034:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003036:	4b39      	ldr	r3, [pc, #228]	; (800311c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	015b      	lsls	r3, r3, #5
 800303c:	0d1b      	lsrs	r3, r3, #20
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	fb02 f303 	mul.w	r3, r2, r3
 8003044:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003046:	e054      	b.n	80030f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304e:	d050      	beq.n	80030f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003050:	f7fe fa7a 	bl	8001548 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	429a      	cmp	r2, r3
 800305e:	d902      	bls.n	8003066 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d13d      	bne.n	80030e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003074:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800307e:	d111      	bne.n	80030a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003088:	d004      	beq.n	8003094 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003092:	d107      	bne.n	80030a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ac:	d10f      	bne.n	80030ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e017      	b.n	8003112 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4013      	ands	r3, r2
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	429a      	cmp	r2, r3
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	429a      	cmp	r2, r3
 800310e:	d19b      	bne.n	8003048 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3720      	adds	r7, #32
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000000 	.word	0x20000000

08003120 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800312e:	f7fe fa0b 	bl	8001548 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	4413      	add	r3, r2
 800313c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800313e:	f7fe fa03 	bl	8001548 <HAL_GetTick>
 8003142:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003144:	4b3e      	ldr	r3, [pc, #248]	; (8003240 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	00da      	lsls	r2, r3, #3
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	0d1b      	lsrs	r3, r3, #20
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800315c:	e062      	b.n	8003224 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003164:	d109      	bne.n	800317a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d106      	bne.n	800317a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	330c      	adds	r3, #12
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003178:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003180:	d050      	beq.n	8003224 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003182:	f7fe f9e1 	bl	8001548 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	429a      	cmp	r2, r3
 8003190:	d902      	bls.n	8003198 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d13d      	bne.n	8003214 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031b0:	d111      	bne.n	80031d6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ba:	d004      	beq.n	80031c6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c4:	d107      	bne.n	80031d6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031de:	d10f      	bne.n	8003200 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e010      	b.n	8003236 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	3b01      	subs	r3, #1
 8003222:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4013      	ands	r3, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	429a      	cmp	r2, r3
 8003232:	d194      	bne.n	800315e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000000 	.word	0x20000000

08003244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2200      	movs	r2, #0
 8003258:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f7ff ff5f 	bl	8003120 <SPI_WaitFifoStateUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e027      	b.n	80032c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2200      	movs	r2, #0
 8003280:	2180      	movs	r1, #128	; 0x80
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f7ff fec4 	bl	8003010 <SPI_WaitFlagStateUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003292:	f043 0220 	orr.w	r2, r3, #32
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e014      	b.n	80032c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f7ff ff38 	bl	8003120 <SPI_WaitFifoStateUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e000      	b.n	80032c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08c      	sub	sp, #48	; 0x30
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	4603      	mov	r3, r0
 80032da:	71fb      	strb	r3, [r7, #7]
 80032dc:	460b      	mov	r3, r1
 80032de:	71bb      	strb	r3, [r7, #6]
 80032e0:	4613      	mov	r3, r2
 80032e2:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80032e8:	79bb      	ldrb	r3, [r7, #6]
 80032ea:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80032ec:	797b      	ldrb	r3, [r7, #5]
 80032ee:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	2207      	movs	r2, #7
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f001 f80b 	bl	8004314 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80032fe:	f107 0318 	add.w	r3, r7, #24
 8003302:	2218      	movs	r2, #24
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f001 f804 	bl	8004314 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800330c:	233f      	movs	r3, #63	; 0x3f
 800330e:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8003310:	238a      	movs	r3, #138	; 0x8a
 8003312:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800331a:	2303      	movs	r3, #3
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800331e:	f107 030c 	add.w	r3, r7, #12
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8003324:	2307      	movs	r3, #7
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003328:	f107 0318 	add.w	r3, r7, #24
 800332c:	2100      	movs	r1, #0
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fd14 	bl	8003d5c <hci_send_req>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	da01      	bge.n	800333e <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800333a:	23ff      	movs	r3, #255	; 0xff
 800333c:	e014      	b.n	8003368 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800333e:	7b3b      	ldrb	r3, [r7, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8003344:	7b3b      	ldrb	r3, [r7, #12]
 8003346:	e00f      	b.n	8003368 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8003348:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800334c:	b29a      	uxth	r2, r3
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003352:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8003356:	b29a      	uxth	r2, r3
 8003358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335a:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800335c:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8003360:	b29a      	uxth	r2, r3
 8003362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003364:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3730      	adds	r7, #48	; 0x30
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b095      	sub	sp, #84	; 0x54
 8003374:	af00      	add	r7, sp, #0
 8003376:	4604      	mov	r4, r0
 8003378:	4608      	mov	r0, r1
 800337a:	4611      	mov	r1, r2
 800337c:	461a      	mov	r2, r3
 800337e:	4623      	mov	r3, r4
 8003380:	71fb      	strb	r3, [r7, #7]
 8003382:	4603      	mov	r3, r0
 8003384:	80bb      	strh	r3, [r7, #4]
 8003386:	460b      	mov	r3, r1
 8003388:	807b      	strh	r3, [r7, #2]
 800338a:	4613      	mov	r3, r2
 800338c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8003394:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8003398:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800339c:	4413      	add	r3, r2
 800339e:	330e      	adds	r3, #14
 80033a0:	2b28      	cmp	r3, #40	; 0x28
 80033a2:	d901      	bls.n	80033a8 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80033a4:	2342      	movs	r3, #66	; 0x42
 80033a6:	e0ce      	b.n	8003546 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 80033a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033ac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80033b0:	4413      	add	r3, r2
 80033b2:	79fa      	ldrb	r2, [r7, #7]
 80033b4:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80033b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033bc:	3301      	adds	r3, #1
 80033be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 80033c2:	88bb      	ldrh	r3, [r7, #4]
 80033c4:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 80033c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033ca:	f107 0208 	add.w	r2, r7, #8
 80033ce:	4413      	add	r3, r2
 80033d0:	88ba      	ldrh	r2, [r7, #4]
 80033d2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80033d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033d8:	3302      	adds	r3, #2
 80033da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80033de:	887b      	ldrh	r3, [r7, #2]
 80033e0:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80033e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033e6:	f107 0208 	add.w	r2, r7, #8
 80033ea:	4413      	add	r3, r2
 80033ec:	887a      	ldrh	r2, [r7, #2]
 80033ee:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80033f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033f4:	3302      	adds	r3, #2
 80033f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 80033fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033fe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003402:	4413      	add	r3, r2
 8003404:	79ba      	ldrb	r2, [r7, #6]
 8003406:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800340a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800340e:	3301      	adds	r3, #1
 8003410:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8003414:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003418:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800341c:	4413      	add	r3, r2
 800341e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8003422:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8003426:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800342a:	3301      	adds	r3, #1
 800342c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8003430:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003434:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003438:	4413      	add	r3, r2
 800343a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800343e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8003442:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003446:	3301      	adds	r3, #1
 8003448:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800344c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003450:	f107 0208 	add.w	r2, r7, #8
 8003454:	4413      	add	r3, r2
 8003456:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800345a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800345c:	4618      	mov	r0, r3
 800345e:	f000 ff4b 	bl	80042f8 <memcpy>
  indx +=  LocalNameLen;
 8003462:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003466:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800346a:	4413      	add	r3, r2
 800346c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8003470:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003474:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003478:	4413      	add	r3, r2
 800347a:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800347e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8003482:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003486:	3301      	adds	r3, #1
 8003488:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800348c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003490:	f107 0208 	add.w	r2, r7, #8
 8003494:	4413      	add	r3, r2
 8003496:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800349a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800349c:	4618      	mov	r0, r3
 800349e:	f000 ff2b 	bl	80042f8 <memcpy>
  indx +=  ServiceUUIDLen;  
 80034a2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80034a6:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80034aa:	4413      	add	r3, r2
 80034ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80034b0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80034b4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80034b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80034bc:	f107 0208 	add.w	r2, r7, #8
 80034c0:	4413      	add	r3, r2
 80034c2:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80034c6:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80034c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80034cc:	3302      	adds	r3, #2
 80034ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 80034d2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80034d6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80034da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80034de:	f107 0208 	add.w	r2, r7, #8
 80034e2:	4413      	add	r3, r2
 80034e4:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80034e8:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80034ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80034ee:	3302      	adds	r3, #2
 80034f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80034f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034f8:	2218      	movs	r2, #24
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 ff09 	bl	8004314 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003502:	233f      	movs	r3, #63	; 0x3f
 8003504:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8003506:	2383      	movs	r3, #131	; 0x83
 8003508:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800350a:	f107 0308 	add.w	r3, r7, #8
 800350e:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8003510:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003514:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8003516:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800351a:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800351c:	2301      	movs	r3, #1
 800351e:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8003520:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fc18 	bl	8003d5c <hci_send_req>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	da01      	bge.n	8003536 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 8003532:	23ff      	movs	r3, #255	; 0xff
 8003534:	e007      	b.n	8003546 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 8003536:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <aci_gap_set_discoverable+0x1d4>
    return status;
 800353e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003542:	e000      	b.n	8003546 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3754      	adds	r7, #84	; 0x54
 800354a:	46bd      	mov	sp, r7
 800354c:	bd90      	pop	{r4, r7, pc}

0800354e <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b088      	sub	sp, #32
 8003552:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003554:	f107 0308 	add.w	r3, r7, #8
 8003558:	2218      	movs	r2, #24
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fed9 	bl	8004314 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003562:	233f      	movs	r3, #63	; 0x3f
 8003564:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8003566:	f240 1301 	movw	r3, #257	; 0x101
 800356a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800356c:	1dfb      	adds	r3, r7, #7
 800356e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003570:	2301      	movs	r3, #1
 8003572:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8003574:	f107 0308 	add.w	r3, r7, #8
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fbee 	bl	8003d5c <hci_send_req>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	da01      	bge.n	800358a <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8003586:	23ff      	movs	r3, #255	; 0xff
 8003588:	e000      	b.n	800358c <aci_gatt_init+0x3e>

  return status;
 800358a:	79fb      	ldrb	r3, [r7, #7]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b090      	sub	sp, #64	; 0x40
 8003598:	af00      	add	r7, sp, #0
 800359a:	6039      	str	r1, [r7, #0]
 800359c:	4611      	mov	r1, r2
 800359e:	461a      	mov	r2, r3
 80035a0:	4603      	mov	r3, r0
 80035a2:	71fb      	strb	r3, [r7, #7]
 80035a4:	460b      	mov	r3, r1
 80035a6:	71bb      	strb	r3, [r7, #6]
 80035a8:	4613      	mov	r3, r2
 80035aa:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 80035b2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80035b6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80035ba:	4413      	add	r3, r2
 80035bc:	79fa      	ldrb	r2, [r7, #7]
 80035be:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80035c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80035c6:	3301      	adds	r3, #1
 80035c8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d103      	bne.n	80035da <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 80035d2:	2302      	movs	r3, #2
 80035d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80035d8:	e002      	b.n	80035e0 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 80035da:	2310      	movs	r3, #16
 80035dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80035e0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80035e4:	f107 020c 	add.w	r2, r7, #12
 80035e8:	4413      	add	r3, r2
 80035ea:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80035ee:	6839      	ldr	r1, [r7, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fe81 	bl	80042f8 <memcpy>
  indx +=  uuid_len;
 80035f6:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80035fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035fe:	4413      	add	r3, r2
 8003600:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8003604:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003608:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800360c:	4413      	add	r3, r2
 800360e:	79ba      	ldrb	r2, [r7, #6]
 8003610:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8003614:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003618:	3301      	adds	r3, #1
 800361a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 800361e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003622:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003626:	4413      	add	r3, r2
 8003628:	797a      	ldrb	r2, [r7, #5]
 800362a:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800362e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003632:	3301      	adds	r3, #1
 8003634:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003638:	f107 0320 	add.w	r3, r7, #32
 800363c:	2203      	movs	r2, #3
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fe67 	bl	8004314 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800364a:	2218      	movs	r2, #24
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fe60 	bl	8004314 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003654:	233f      	movs	r3, #63	; 0x3f
 8003656:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8003658:	f44f 7381 	mov.w	r3, #258	; 0x102
 800365c:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800365e:	f107 030c 	add.w	r3, r7, #12
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8003664:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003668:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800366a:	f107 0320 	add.w	r3, r7, #32
 800366e:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8003670:	2303      	movs	r3, #3
 8003672:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8003674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003678:	2100      	movs	r1, #0
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fb6e 	bl	8003d5c <hci_send_req>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	da01      	bge.n	800368a <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 8003686:	23ff      	movs	r3, #255	; 0xff
 8003688:	e00c      	b.n	80036a4 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 800368a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <aci_gatt_add_serv+0x104>
    return resp.status;
 8003692:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003696:	e005      	b.n	80036a4 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 8003698:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 800369c:	b29a      	uxth	r2, r3
 800369e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a0:	801a      	strh	r2, [r3, #0]

  return 0;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3740      	adds	r7, #64	; 0x40
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b092      	sub	sp, #72	; 0x48
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	603a      	str	r2, [r7, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	80fb      	strh	r3, [r7, #6]
 80036ba:	460b      	mov	r3, r1
 80036bc:	717b      	strb	r3, [r7, #5]
 80036be:	4613      	mov	r3, r2
 80036c0:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 80036cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036d0:	f107 020c 	add.w	r2, r7, #12
 80036d4:	4413      	add	r3, r2
 80036d6:	88fa      	ldrh	r2, [r7, #6]
 80036d8:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80036da:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036de:	3302      	adds	r3, #2
 80036e0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 80036e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036ec:	4413      	add	r3, r2
 80036ee:	797a      	ldrb	r2, [r7, #5]
 80036f0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80036f4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036f8:	3301      	adds	r3, #1
 80036fa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 80036fe:	797b      	ldrb	r3, [r7, #5]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d103      	bne.n	800370c <aci_gatt_add_char+0x60>
    uuid_len = 2;
 8003704:	2302      	movs	r3, #2
 8003706:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800370a:	e002      	b.n	8003712 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 800370c:	2310      	movs	r3, #16
 800370e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8003712:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003716:	f107 020c 	add.w	r2, r7, #12
 800371a:	4413      	add	r3, r2
 800371c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003720:	6839      	ldr	r1, [r7, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fde8 	bl	80042f8 <memcpy>
  indx +=  uuid_len;
 8003728:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800372c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003730:	4413      	add	r3, r2
 8003732:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8003736:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800373a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800373e:	4413      	add	r3, r2
 8003740:	793a      	ldrb	r2, [r7, #4]
 8003742:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8003746:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800374a:	3301      	adds	r3, #1
 800374c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8003750:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003754:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003758:	4413      	add	r3, r2
 800375a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800375e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8003762:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003766:	3301      	adds	r3, #1
 8003768:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 800376c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003770:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003774:	4413      	add	r3, r2
 8003776:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800377a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800377e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003782:	3301      	adds	r3, #1
 8003784:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8003788:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800378c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003790:	4413      	add	r3, r2
 8003792:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8003796:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800379a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800379e:	3301      	adds	r3, #1
 80037a0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 80037a4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80037a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037ac:	4413      	add	r3, r2
 80037ae:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80037b2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80037b6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80037ba:	3301      	adds	r3, #1
 80037bc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 80037c0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80037c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037c8:	4413      	add	r3, r2
 80037ca:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80037ce:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80037d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80037d6:	3301      	adds	r3, #1
 80037d8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80037dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037e0:	2203      	movs	r2, #3
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fd95 	bl	8004314 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80037ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ee:	2218      	movs	r2, #24
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fd8e 	bl	8004314 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80037f8:	233f      	movs	r3, #63	; 0x3f
 80037fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 80037fc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003800:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8003802:	f107 030c 	add.w	r3, r7, #12
 8003806:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8003808:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800380c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800380e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003812:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8003814:	2303      	movs	r3, #3
 8003816:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8003818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fa9c 	bl	8003d5c <hci_send_req>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	da01      	bge.n	800382e <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 800382a:	23ff      	movs	r3, #255	; 0xff
 800382c:	e00c      	b.n	8003848 <aci_gatt_add_char+0x19c>

  if (resp.status) {
 800382e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <aci_gatt_add_char+0x190>
    return resp.status;
 8003836:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800383a:	e005      	b.n	8003848 <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 800383c:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8003840:	b29a      	uxth	r2, r3
 8003842:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003844:	801a      	strh	r2, [r3, #0]

  return 0;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3748      	adds	r7, #72	; 0x48
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8003850:	b590      	push	{r4, r7, lr}
 8003852:	b0ab      	sub	sp, #172	; 0xac
 8003854:	af00      	add	r7, sp, #0
 8003856:	4604      	mov	r4, r0
 8003858:	4608      	mov	r0, r1
 800385a:	4611      	mov	r1, r2
 800385c:	461a      	mov	r2, r3
 800385e:	4623      	mov	r3, r4
 8003860:	80fb      	strh	r3, [r7, #6]
 8003862:	4603      	mov	r3, r0
 8003864:	80bb      	strh	r3, [r7, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	70fb      	strb	r3, [r7, #3]
 800386a:	4613      	mov	r3, r2
 800386c:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8003874:	78bb      	ldrb	r3, [r7, #2]
 8003876:	2b7a      	cmp	r3, #122	; 0x7a
 8003878:	d901      	bls.n	800387e <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800387a:	2342      	movs	r3, #66	; 0x42
 800387c:	e076      	b.n	800396c <aci_gatt_update_char_value+0x11c>

  servHandle = htobs(servHandle);
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8003882:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003886:	f107 0208 	add.w	r2, r7, #8
 800388a:	4413      	add	r3, r2
 800388c:	88fa      	ldrh	r2, [r7, #6]
 800388e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8003890:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003894:	3302      	adds	r3, #2
 8003896:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 800389a:	88bb      	ldrh	r3, [r7, #4]
 800389c:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800389e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80038a2:	f107 0208 	add.w	r2, r7, #8
 80038a6:	4413      	add	r3, r2
 80038a8:	88ba      	ldrh	r2, [r7, #4]
 80038aa:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80038ac:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80038b0:	3302      	adds	r3, #2
 80038b2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 80038b6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80038ba:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80038be:	4413      	add	r3, r2
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80038c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80038ca:	3301      	adds	r3, #1
 80038cc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 80038d0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80038d4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80038d8:	4413      	add	r3, r2
 80038da:	78ba      	ldrb	r2, [r7, #2]
 80038dc:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80038e0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80038e4:	3301      	adds	r3, #1
 80038e6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80038ea:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80038ee:	f107 0208 	add.w	r2, r7, #8
 80038f2:	4413      	add	r3, r2
 80038f4:	78ba      	ldrb	r2, [r7, #2]
 80038f6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fcfc 	bl	80042f8 <memcpy>
  indx +=  charValueLen;
 8003900:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8003904:	78bb      	ldrb	r3, [r7, #2]
 8003906:	4413      	add	r3, r2
 8003908:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800390c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003910:	2218      	movs	r2, #24
 8003912:	2100      	movs	r1, #0
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fcfd 	bl	8004314 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800391a:	233f      	movs	r3, #63	; 0x3f
 800391c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8003920:	f44f 7383 	mov.w	r3, #262	; 0x106
 8003924:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8003928:	f107 0308 	add.w	r3, r7, #8
 800392c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8003930:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8003938:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800393c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8003940:	2301      	movs	r3, #1
 8003942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8003946:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fa05 	bl	8003d5c <hci_send_req>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	da01      	bge.n	800395c <aci_gatt_update_char_value+0x10c>
    return BLE_STATUS_TIMEOUT;
 8003958:	23ff      	movs	r3, #255	; 0xff
 800395a:	e007      	b.n	800396c <aci_gatt_update_char_value+0x11c>

  if (status) {
 800395c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <aci_gatt_update_char_value+0x11a>
    return status;
 8003964:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003968:	e000      	b.n	800396c <aci_gatt_update_char_value+0x11c>
  }

  return 0;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	37ac      	adds	r7, #172	; 0xac
 8003970:	46bd      	mov	sp, r7
 8003972:	bd90      	pop	{r4, r7, pc}

08003974 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8003982:	f107 0310 	add.w	r3, r7, #16
 8003986:	2218      	movs	r2, #24
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fcc2 	bl	8004314 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8003990:	233f      	movs	r3, #63	; 0x3f
 8003992:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8003994:	f240 1327 	movw	r3, #295	; 0x127
 8003998:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800399a:	f107 030c 	add.w	r3, r7, #12
 800399e:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 80039a0:	2302      	movs	r3, #2
 80039a2:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 80039a4:	f107 030b 	add.w	r3, r7, #11
 80039a8:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 80039aa:	2301      	movs	r3, #1
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 80039ae:	f107 0310 	add.w	r3, r7, #16
 80039b2:	2100      	movs	r1, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 f9d1 	bl	8003d5c <hci_send_req>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	da01      	bge.n	80039c4 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 80039c0:	23ff      	movs	r3, #255	; 0xff
 80039c2:	e000      	b.n	80039c6 <aci_gatt_allow_read+0x52>

    return status;
 80039c4:	7afb      	ldrb	r3, [r7, #11]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3728      	adds	r7, #40	; 0x28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b0aa      	sub	sp, #168	; 0xa8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	4603      	mov	r3, r0
 80039d6:	603a      	str	r2, [r7, #0]
 80039d8:	71fb      	strb	r3, [r7, #7]
 80039da:	460b      	mov	r3, r1
 80039dc:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 80039e4:	79bb      	ldrb	r3, [r7, #6]
 80039e6:	2b7e      	cmp	r3, #126	; 0x7e
 80039e8:	d901      	bls.n	80039ee <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 80039ea:	2342      	movs	r3, #66	; 0x42
 80039ec:	e052      	b.n	8003a94 <aci_hal_write_config_data+0xc6>

  buffer[indx] = offset;
 80039ee:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80039f2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80039f6:	4413      	add	r3, r2
 80039f8:	79fa      	ldrb	r2, [r7, #7]
 80039fa:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80039fe:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003a02:	3301      	adds	r3, #1
 8003a04:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 8003a08:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003a0c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003a10:	4413      	add	r3, r2
 8003a12:	79ba      	ldrb	r2, [r7, #6]
 8003a14:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8003a18:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8003a22:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003a26:	f107 0208 	add.w	r2, r7, #8
 8003a2a:	4413      	add	r3, r2
 8003a2c:	79ba      	ldrb	r2, [r7, #6]
 8003a2e:	6839      	ldr	r1, [r7, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fc61 	bl	80042f8 <memcpy>
  indx +=  len;
 8003a36:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8003a3a:	79bb      	ldrb	r3, [r7, #6]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003a42:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003a46:	2218      	movs	r2, #24
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fc62 	bl	8004314 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003a50:	233f      	movs	r3, #63	; 0x3f
 8003a52:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8003a56:	230c      	movs	r3, #12
 8003a58:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8003a5c:	f107 0308 	add.w	r3, r7, #8
 8003a60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8003a64:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8003a6c:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8003a70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8003a7a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 f96b 	bl	8003d5c <hci_send_req>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	da01      	bge.n	8003a90 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8003a8c:	23ff      	movs	r3, #255	; 0xff
 8003a8e:	e001      	b.n	8003a94 <aci_hal_write_config_data+0xc6>

  return status;
 8003a90:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	37a8      	adds	r7, #168	; 0xa8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003aa2:	f107 0308 	add.w	r3, r7, #8
 8003aa6:	2218      	movs	r2, #24
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fc32 	bl	8004314 <memset>
  rq.ogf = OGF_HOST_CTL;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003ab8:	1dfb      	adds	r3, r7, #7
 8003aba:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003abc:	2301      	movs	r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003ac0:	f107 0308 	add.w	r3, r7, #8
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f948 	bl	8003d5c <hci_send_req>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	da01      	bge.n	8003ad6 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8003ad2:	23ff      	movs	r3, #255	; 0xff
 8003ad4:	e000      	b.n	8003ad8 <hci_reset+0x3c>
  
  return status;  
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3720      	adds	r7, #32
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b092      	sub	sp, #72	; 0x48
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	6039      	str	r1, [r7, #0]
 8003aea:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8003aec:	f107 0310 	add.w	r3, r7, #16
 8003af0:	2220      	movs	r2, #32
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fc0d 	bl	8004314 <memset>
  scan_resp_cp.length = length;
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	2b1f      	cmp	r3, #31
 8003b02:	bf28      	it	cs
 8003b04:	231f      	movcs	r3, #31
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f107 0310 	add.w	r3, r7, #16
 8003b0e:	3301      	adds	r3, #1
 8003b10:	6839      	ldr	r1, [r7, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fbf0 	bl	80042f8 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003b18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b1c:	2218      	movs	r2, #24
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fbf7 	bl	8004314 <memset>
  rq.ogf = OGF_LE_CTL;
 8003b26:	2308      	movs	r3, #8
 8003b28:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8003b2a:	2309      	movs	r3, #9
 8003b2c:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 8003b2e:	f107 0310 	add.w	r3, r7, #16
 8003b32:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8003b34:	2320      	movs	r3, #32
 8003b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8003b38:	f107 030f 	add.w	r3, r7, #15
 8003b3c:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b46:	2100      	movs	r1, #0
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f907 	bl	8003d5c <hci_send_req>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	da01      	bge.n	8003b58 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8003b54:	23ff      	movs	r3, #255	; 0xff
 8003b56:	e000      	b.n	8003b5a <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3748      	adds	r7, #72	; 0x48
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d001      	beq.n	8003b7c <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e00c      	b.n	8003b96 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3302      	adds	r3, #2
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003b8a:	3b03      	subs	r3, #3
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8003b90:	2302      	movs	r3, #2
 8003b92:	e000      	b.n	8003b96 <verify_packet+0x34>
  
  return 0;      
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b0a6      	sub	sp, #152	; 0x98
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	607b      	str	r3, [r7, #4]
 8003bac:	4603      	mov	r3, r0
 8003bae:	81fb      	strh	r3, [r7, #14]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	81bb      	strh	r3, [r7, #12]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8003bb8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bc0:	b21a      	sxth	r2, r3
 8003bc2:	89fb      	ldrh	r3, [r7, #14]
 8003bc4:	029b      	lsls	r3, r3, #10
 8003bc6:	b21b      	sxth	r3, r3
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	b21b      	sxth	r3, r3
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8003bd0:	7afb      	ldrb	r3, [r7, #11]
 8003bd2:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8003bd8:	f107 0318 	add.w	r3, r7, #24
 8003bdc:	3301      	adds	r3, #1
 8003bde:	461a      	mov	r2, r3
 8003be0:	f107 0314 	add.w	r3, r7, #20
 8003be4:	8819      	ldrh	r1, [r3, #0]
 8003be6:	789b      	ldrb	r3, [r3, #2]
 8003be8:	8011      	strh	r1, [r2, #0]
 8003bea:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8003bec:	f107 0318 	add.w	r3, r7, #24
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	7afa      	ldrb	r2, [r7, #11]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fb7e 	bl	80042f8 <memcpy>
  
  if (hciContext.io.Send)
 8003bfc:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <send_cmd+0x7c>)
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d009      	beq.n	8003c18 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <send_cmd+0x7c>)
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	7afa      	ldrb	r2, [r7, #11]
 8003c0a:	b292      	uxth	r2, r2
 8003c0c:	3204      	adds	r2, #4
 8003c0e:	b291      	uxth	r1, r2
 8003c10:	f107 0218 	add.w	r2, r7, #24
 8003c14:	4610      	mov	r0, r2
 8003c16:	4798      	blx	r3
  }
}
 8003c18:	bf00      	nop
 8003c1a:	3798      	adds	r7, #152	; 0x98
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20001e9c 	.word	0x20001e9c

08003c24 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8003c2e:	e00a      	b.n	8003c46 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8003c30:	f107 030c 	add.w	r3, r7, #12
 8003c34:	4619      	mov	r1, r3
 8003c36:	6838      	ldr	r0, [r7, #0]
 8003c38:	f000 faea 	bl	8004210 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 fa51 	bl	80040e8 <list_insert_head>
  while (!list_is_empty(src_list))
 8003c46:	6838      	ldr	r0, [r7, #0]
 8003c48:	f000 fa2c 	bl	80040a4 <list_is_empty>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0ee      	beq.n	8003c30 <move_list+0xc>
  }
}
 8003c52:	bf00      	nop
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003c62:	e009      	b.n	8003c78 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8003c64:	1d3b      	adds	r3, r7, #4
 8003c66:	4619      	mov	r1, r3
 8003c68:	4809      	ldr	r0, [pc, #36]	; (8003c90 <free_event_list+0x34>)
 8003c6a:	f000 faaa 	bl	80041c2 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4619      	mov	r1, r3
 8003c72:	4808      	ldr	r0, [pc, #32]	; (8003c94 <free_event_list+0x38>)
 8003c74:	f000 fa5e 	bl	8004134 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003c78:	4806      	ldr	r0, [pc, #24]	; (8003c94 <free_event_list+0x38>)
 8003c7a:	f000 faf0 	bl	800425e <list_get_size>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	ddef      	ble.n	8003c64 <free_event_list+0x8>
  }
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20002010 	.word	0x20002010
 8003c94:	20002008 	.word	0x20002008

08003c98 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8003ca8:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <hci_init+0x74>)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8003cae:	4818      	ldr	r0, [pc, #96]	; (8003d10 <hci_init+0x78>)
 8003cb0:	f000 f9e8 	bl	8004084 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8003cb4:	4817      	ldr	r0, [pc, #92]	; (8003d14 <hci_init+0x7c>)
 8003cb6:	f000 f9e5 	bl	8004084 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8003cba:	f7fc fbcb 	bl	8000454 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	73fb      	strb	r3, [r7, #15]
 8003cc2:	e00c      	b.n	8003cde <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	228c      	movs	r2, #140	; 0x8c
 8003cc8:	fb02 f303 	mul.w	r3, r2, r3
 8003ccc:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <hci_init+0x80>)
 8003cce:	4413      	add	r3, r2
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	480f      	ldr	r0, [pc, #60]	; (8003d10 <hci_init+0x78>)
 8003cd4:	f000 fa2e 	bl	8004134 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d9ef      	bls.n	8003cc4 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <hci_init+0x74>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <hci_init+0x5c>
 8003cec:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <hci_init+0x74>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <hci_init+0x74>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <hci_init+0x6a>
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <hci_init+0x74>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	4798      	blx	r3
}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20001e9c 	.word	0x20001e9c
 8003d10:	20002008 	.word	0x20002008
 8003d14:	20002010 	.word	0x20002010
 8003d18:	20001be0 	.word	0x20001be0

08003d1c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a0b      	ldr	r2, [pc, #44]	; (8003d58 <hci_register_io_bus+0x3c>)
 8003d2a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <hci_register_io_bus+0x3c>)
 8003d32:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	4a07      	ldr	r2, [pc, #28]	; (8003d58 <hci_register_io_bus+0x3c>)
 8003d3a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	4a05      	ldr	r2, [pc, #20]	; (8003d58 <hci_register_io_bus+0x3c>)
 8003d42:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4a03      	ldr	r2, [pc, #12]	; (8003d58 <hci_register_io_bus+0x3c>)
 8003d4a:	6093      	str	r3, [r2, #8]
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	20001e9c 	.word	0x20001e9c

08003d5c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08e      	sub	sp, #56	; 0x38
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	885b      	ldrh	r3, [r3, #2]
 8003d6c:	b21b      	sxth	r3, r3
 8003d6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d72:	b21a      	sxth	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	029b      	lsls	r3, r3, #10
 8003d7a:	b21b      	sxth	r3, r3
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	b21b      	sxth	r3, r3
 8003d80:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8003d86:	f107 0308 	add.w	r3, r7, #8
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f97a 	bl	8004084 <list_init_head>

  free_event_list();
 8003d90:	f7ff ff64 	bl	8003c5c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8818      	ldrh	r0, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8859      	ldrh	r1, [r3, #2]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f7ff fefd 	bl	8003ba4 <send_cmd>
  
  if (async)
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <hci_send_req+0x58>
  {
    return 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e0e5      	b.n	8003f80 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8003db4:	f7fd fbc8 	bl	8001548 <HAL_GetTick>
 8003db8:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003dba:	f7fd fbc5 	bl	8001548 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dc8:	f200 80b6 	bhi.w	8003f38 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8003dcc:	486e      	ldr	r0, [pc, #440]	; (8003f88 <hci_send_req+0x22c>)
 8003dce:	f000 f969 	bl	80040a4 <list_is_empty>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d000      	beq.n	8003dda <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003dd8:	e7ef      	b.n	8003dba <hci_send_req+0x5e>
      {
        break;
 8003dda:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8003ddc:	f107 0310 	add.w	r3, r7, #16
 8003de0:	4619      	mov	r1, r3
 8003de2:	4869      	ldr	r0, [pc, #420]	; (8003f88 <hci_send_req+0x22c>)
 8003de4:	f000 f9ed 	bl	80041c2 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	3308      	adds	r3, #8
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d17b      	bne.n	8003eee <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df8:	3301      	adds	r3, #1
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	3308      	adds	r3, #8
 8003e00:	3303      	adds	r3, #3
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003e0a:	3b03      	subs	r3, #3
 8003e0c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b3e      	cmp	r3, #62	; 0x3e
 8003e14:	d04d      	beq.n	8003eb2 <hci_send_req+0x156>
 8003e16:	2b3e      	cmp	r3, #62	; 0x3e
 8003e18:	dc6b      	bgt.n	8003ef2 <hci_send_req+0x196>
 8003e1a:	2b10      	cmp	r3, #16
 8003e1c:	f000 808e 	beq.w	8003f3c <hci_send_req+0x1e0>
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	dc66      	bgt.n	8003ef2 <hci_send_req+0x196>
 8003e24:	2b0e      	cmp	r3, #14
 8003e26:	d024      	beq.n	8003e72 <hci_send_req+0x116>
 8003e28:	2b0f      	cmp	r3, #15
 8003e2a:	d162      	bne.n	8003ef2 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	885b      	ldrh	r3, [r3, #2]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	f040 8081 	bne.w	8003f40 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b0f      	cmp	r3, #15
 8003e44:	d004      	beq.n	8003e50 <hci_send_req+0xf4>
          if (cs->status) {
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d053      	beq.n	8003ef6 <hci_send_req+0x19a>
            goto failed;
 8003e4e:	e07a      	b.n	8003f46 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	bf28      	it	cs
 8003e5a:	461a      	movcs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6918      	ldr	r0, [r3, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e6c:	f000 fa44 	bl	80042f8 <memcpy>
        goto done;
 8003e70:	e07a      	b.n	8003f68 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d15f      	bne.n	8003f44 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	3303      	adds	r3, #3
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	3b03      	subs	r3, #3
 8003e8e:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	bf28      	it	cs
 8003e9a:	461a      	movcs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6918      	ldr	r0, [r3, #16]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eac:	f000 fa24 	bl	80042f8 <memcpy>
        goto done;
 8003eb0:	e05a      	b.n	8003f68 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d11a      	bne.n	8003efa <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	bf28      	it	cs
 8003ed4:	461a      	movcs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6918      	ldr	r0, [r3, #16]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	1c59      	adds	r1, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f000 fa06 	bl	80042f8 <memcpy>
        goto done;
 8003eec:	e03c      	b.n	8003f68 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 8003eee:	bf00      	nop
 8003ef0:	e004      	b.n	8003efc <hci_send_req+0x1a0>
        break;
 8003ef2:	bf00      	nop
 8003ef4:	e002      	b.n	8003efc <hci_send_req+0x1a0>
          break;
 8003ef6:	bf00      	nop
 8003ef8:	e000      	b.n	8003efc <hci_send_req+0x1a0>
          break;
 8003efa:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8003efc:	4823      	ldr	r0, [pc, #140]	; (8003f8c <hci_send_req+0x230>)
 8003efe:	f000 f8d1 	bl	80040a4 <list_is_empty>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00d      	beq.n	8003f24 <hci_send_req+0x1c8>
 8003f08:	481f      	ldr	r0, [pc, #124]	; (8003f88 <hci_send_req+0x22c>)
 8003f0a:	f000 f8cb 	bl	80040a4 <list_is_empty>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d007      	beq.n	8003f24 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4619      	mov	r1, r3
 8003f18:	481c      	ldr	r0, [pc, #112]	; (8003f8c <hci_send_req+0x230>)
 8003f1a:	f000 f90b 	bl	8004134 <list_insert_tail>
      hciReadPacket=NULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	e008      	b.n	8003f36 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	f107 0308 	add.w	r3, r7, #8
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 f901 	bl	8004134 <list_insert_tail>
      hciReadPacket=NULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	613b      	str	r3, [r7, #16]
  {
 8003f36:	e73d      	b.n	8003db4 <hci_send_req+0x58>
        goto failed;
 8003f38:	bf00      	nop
 8003f3a:	e004      	b.n	8003f46 <hci_send_req+0x1ea>
        goto failed;
 8003f3c:	bf00      	nop
 8003f3e:	e002      	b.n	8003f46 <hci_send_req+0x1ea>
          goto failed;
 8003f40:	bf00      	nop
 8003f42:	e000      	b.n	8003f46 <hci_send_req+0x1ea>
          goto failed;
 8003f44:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d004      	beq.n	8003f56 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4619      	mov	r1, r3
 8003f50:	480e      	ldr	r0, [pc, #56]	; (8003f8c <hci_send_req+0x230>)
 8003f52:	f000 f8c9 	bl	80040e8 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003f56:	f107 0308 	add.w	r3, r7, #8
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	480a      	ldr	r0, [pc, #40]	; (8003f88 <hci_send_req+0x22c>)
 8003f5e:	f7ff fe61 	bl	8003c24 <move_list>

  return -1;
 8003f62:	f04f 33ff 	mov.w	r3, #4294967295
 8003f66:	e00b      	b.n	8003f80 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4807      	ldr	r0, [pc, #28]	; (8003f8c <hci_send_req+0x230>)
 8003f6e:	f000 f8bb 	bl	80040e8 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003f72:	f107 0308 	add.w	r3, r7, #8
 8003f76:	4619      	mov	r1, r3
 8003f78:	4803      	ldr	r0, [pc, #12]	; (8003f88 <hci_send_req+0x22c>)
 8003f7a:	f7ff fe53 	bl	8003c24 <move_list>

  return 0;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3738      	adds	r7, #56	; 0x38
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20002010 	.word	0x20002010
 8003f8c:	20002008 	.word	0x20002008

08003f90 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8003f9a:	e013      	b.n	8003fc4 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8003f9c:	1d3b      	adds	r3, r7, #4
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	480e      	ldr	r0, [pc, #56]	; (8003fdc <hci_user_evt_proc+0x4c>)
 8003fa2:	f000 f90e 	bl	80041c2 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8003fa6:	4b0e      	ldr	r3, [pc, #56]	; (8003fe0 <hci_user_evt_proc+0x50>)
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d005      	beq.n	8003fba <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8003fae:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <hci_user_evt_proc+0x50>)
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	3208      	adds	r2, #8
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4809      	ldr	r0, [pc, #36]	; (8003fe4 <hci_user_evt_proc+0x54>)
 8003fc0:	f000 f8b8 	bl	8004134 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8003fc4:	4805      	ldr	r0, [pc, #20]	; (8003fdc <hci_user_evt_proc+0x4c>)
 8003fc6:	f000 f86d 	bl	80040a4 <list_is_empty>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0e5      	beq.n	8003f9c <hci_user_evt_proc+0xc>
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20002010 	.word	0x20002010
 8003fe0:	20001e9c 	.word	0x20001e9c
 8003fe4:	20002008 	.word	0x20002008

08003fe8 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8003ff8:	481f      	ldr	r0, [pc, #124]	; (8004078 <hci_notify_asynch_evt+0x90>)
 8003ffa:	f000 f853 	bl	80040a4 <list_is_empty>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d132      	bne.n	800406a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8004004:	f107 030c 	add.w	r3, r7, #12
 8004008:	4619      	mov	r1, r3
 800400a:	481b      	ldr	r0, [pc, #108]	; (8004078 <hci_notify_asynch_evt+0x90>)
 800400c:	f000 f8d9 	bl	80041c2 <list_remove_head>
    
    if (hciContext.io.Receive)
 8004010:	4b1a      	ldr	r3, [pc, #104]	; (800407c <hci_notify_asynch_evt+0x94>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d02a      	beq.n	800406e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8004018:	4b18      	ldr	r3, [pc, #96]	; (800407c <hci_notify_asynch_evt+0x94>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	3208      	adds	r2, #8
 8004020:	2180      	movs	r1, #128	; 0x80
 8004022:	4610      	mov	r0, r2
 8004024:	4798      	blx	r3
 8004026:	4603      	mov	r3, r0
 8004028:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d016      	beq.n	800405e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	7cfa      	ldrb	r2, [r7, #19]
 8004034:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff fd91 	bl	8003b62 <verify_packet>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d105      	bne.n	8004052 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4619      	mov	r1, r3
 800404a:	480d      	ldr	r0, [pc, #52]	; (8004080 <hci_notify_asynch_evt+0x98>)
 800404c:	f000 f872 	bl	8004134 <list_insert_tail>
 8004050:	e00d      	b.n	800406e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4619      	mov	r1, r3
 8004056:	4808      	ldr	r0, [pc, #32]	; (8004078 <hci_notify_asynch_evt+0x90>)
 8004058:	f000 f846 	bl	80040e8 <list_insert_head>
 800405c:	e007      	b.n	800406e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4619      	mov	r1, r3
 8004062:	4805      	ldr	r0, [pc, #20]	; (8004078 <hci_notify_asynch_evt+0x90>)
 8004064:	f000 f840 	bl	80040e8 <list_insert_head>
 8004068:	e001      	b.n	800406e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800406a:	2301      	movs	r3, #1
 800406c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800406e:	697b      	ldr	r3, [r7, #20]

}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20002008 	.word	0x20002008
 800407c:	20001e9c 	.word	0x20001e9c
 8004080:	20002010 	.word	0x20002010

08004084 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	605a      	str	r2, [r3, #4]
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ac:	f3ef 8310 	mrs	r3, PRIMASK
 80040b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80040b2:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80040b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80040b6:	b672      	cpsid	i
}
 80040b8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d102      	bne.n	80040ca <list_is_empty+0x26>
  {
    return_value = 1;
 80040c4:	2301      	movs	r3, #1
 80040c6:	75fb      	strb	r3, [r7, #23]
 80040c8:	e001      	b.n	80040ce <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	75fb      	strb	r3, [r7, #23]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f383 8810 	msr	PRIMASK, r3
}
 80040d8:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80040da:	7dfb      	ldrb	r3, [r7, #23]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f2:	f3ef 8310 	mrs	r3, PRIMASK
 80040f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80040f8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80040fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80040fc:	b672      	cpsid	i
}
 80040fe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f383 8810 	msr	PRIMASK, r3
}
 8004126:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004128:	bf00      	nop
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800413e:	f3ef 8310 	mrs	r3, PRIMASK
 8004142:	60fb      	str	r3, [r7, #12]
  return(result);
 8004144:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004146:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004148:	b672      	cpsid	i
}
 800414a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f383 8810 	msr	PRIMASK, r3
}
 8004172:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004174:	bf00      	nop
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004188:	f3ef 8310 	mrs	r3, PRIMASK
 800418c:	60fb      	str	r3, [r7, #12]
  return(result);
 800418e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004190:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004192:	b672      	cpsid	i
}
 8004194:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6852      	ldr	r2, [r2, #4]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f383 8810 	msr	PRIMASK, r3
}
 80041b4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b086      	sub	sp, #24
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041cc:	f3ef 8310 	mrs	r3, PRIMASK
 80041d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80041d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80041d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80041d6:	b672      	cpsid	i
}
 80041d8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff ffca 	bl	8004180 <list_remove_node>
  (*node)->next = NULL;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2200      	movs	r2, #0
 80041fa:	605a      	str	r2, [r3, #4]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f383 8810 	msr	PRIMASK, r3
}
 8004206:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004208:	bf00      	nop
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800421a:	f3ef 8310 	mrs	r3, PRIMASK
 800421e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004220:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004222:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004224:	b672      	cpsid	i
}
 8004226:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff ffa3 	bl	8004180 <list_remove_node>
  (*node)->next = NULL;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2200      	movs	r2, #0
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f383 8810 	msr	PRIMASK, r3
}
 8004254:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004256:	bf00      	nop
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800425e:	b480      	push	{r7}
 8004260:	b089      	sub	sp, #36	; 0x24
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  int size = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800426a:	f3ef 8310 	mrs	r3, PRIMASK
 800426e:	613b      	str	r3, [r7, #16]
  return(result);
 8004270:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004272:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004274:	b672      	cpsid	i
}
 8004276:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800427e:	e005      	b.n	800428c <list_get_size+0x2e>
  {
    size++;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	3301      	adds	r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	d1f5      	bne.n	8004280 <list_get_size+0x22>
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f383 8810 	msr	PRIMASK, r3
}
 800429e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80042a0:	69fb      	ldr	r3, [r7, #28]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3724      	adds	r7, #36	; 0x24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
	...

080042b0 <__libc_init_array>:
 80042b0:	b570      	push	{r4, r5, r6, lr}
 80042b2:	4d0d      	ldr	r5, [pc, #52]	; (80042e8 <__libc_init_array+0x38>)
 80042b4:	4c0d      	ldr	r4, [pc, #52]	; (80042ec <__libc_init_array+0x3c>)
 80042b6:	1b64      	subs	r4, r4, r5
 80042b8:	10a4      	asrs	r4, r4, #2
 80042ba:	2600      	movs	r6, #0
 80042bc:	42a6      	cmp	r6, r4
 80042be:	d109      	bne.n	80042d4 <__libc_init_array+0x24>
 80042c0:	4d0b      	ldr	r5, [pc, #44]	; (80042f0 <__libc_init_array+0x40>)
 80042c2:	4c0c      	ldr	r4, [pc, #48]	; (80042f4 <__libc_init_array+0x44>)
 80042c4:	f000 f82e 	bl	8004324 <_init>
 80042c8:	1b64      	subs	r4, r4, r5
 80042ca:	10a4      	asrs	r4, r4, #2
 80042cc:	2600      	movs	r6, #0
 80042ce:	42a6      	cmp	r6, r4
 80042d0:	d105      	bne.n	80042de <__libc_init_array+0x2e>
 80042d2:	bd70      	pop	{r4, r5, r6, pc}
 80042d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d8:	4798      	blx	r3
 80042da:	3601      	adds	r6, #1
 80042dc:	e7ee      	b.n	80042bc <__libc_init_array+0xc>
 80042de:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e2:	4798      	blx	r3
 80042e4:	3601      	adds	r6, #1
 80042e6:	e7f2      	b.n	80042ce <__libc_init_array+0x1e>
 80042e8:	080043d4 	.word	0x080043d4
 80042ec:	080043d4 	.word	0x080043d4
 80042f0:	080043d4 	.word	0x080043d4
 80042f4:	080043d8 	.word	0x080043d8

080042f8 <memcpy>:
 80042f8:	440a      	add	r2, r1
 80042fa:	4291      	cmp	r1, r2
 80042fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004300:	d100      	bne.n	8004304 <memcpy+0xc>
 8004302:	4770      	bx	lr
 8004304:	b510      	push	{r4, lr}
 8004306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800430a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800430e:	4291      	cmp	r1, r2
 8004310:	d1f9      	bne.n	8004306 <memcpy+0xe>
 8004312:	bd10      	pop	{r4, pc}

08004314 <memset>:
 8004314:	4402      	add	r2, r0
 8004316:	4603      	mov	r3, r0
 8004318:	4293      	cmp	r3, r2
 800431a:	d100      	bne.n	800431e <memset+0xa>
 800431c:	4770      	bx	lr
 800431e:	f803 1b01 	strb.w	r1, [r3], #1
 8004322:	e7f9      	b.n	8004318 <memset+0x4>

08004324 <_init>:
 8004324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004326:	bf00      	nop
 8004328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432a:	bc08      	pop	{r3}
 800432c:	469e      	mov	lr, r3
 800432e:	4770      	bx	lr

08004330 <_fini>:
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	bf00      	nop
 8004334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004336:	bc08      	pop	{r3}
 8004338:	469e      	mov	lr, r3
 800433a:	4770      	bx	lr
